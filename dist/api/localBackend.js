class LocalBackend{constructor(){this.baseURL="https://api.infi-dev.com/example-removed/",this.isLocalMode=!0,this.initializeLocalStorage()}async initializeLocalStorage(){const e={local_folders:[],local_prompts:[],local_chains:[],local_pinned:[],local_announcements:[],local_user_data:{isPaid:!0,accountId:"local-user"}};for(const[t,a]of Object.entries(e))try{const e=await chrome.storage.local.get(t);e&&void 0!==e[t]&&null!==e[t]||await chrome.storage.local.set({[t]:a})}catch(e){console.warn(`üö® LOCAL BACKEND: Failed to initialize storage for ${t}:`,e);try{await chrome.storage.local.set({[t]:a})}catch(e){console.error(`üö® LOCAL BACKEND: Critical storage error for ${t}:`,e)}}}async interceptApiCall(e,t={}){console.log(`üîÑ LOCAL BACKEND: Intercepting API call to ${e}`);const a=new URL(e),s=a.pathname.replace("/example-removed/",""),c=a.searchParams;return await this.routeRequest(s,t,c)}async routeRequest(e,t,a){const s=t.method||"GET",c=t.body?JSON.parse(t.body):null;try{return e.startsWith("auth/")?await this.handleAuth(e,s,c):e.startsWith("payments/")?await this.handlePayments(e,s,c):e.startsWith("folder/")?await this.handleFolders(e,s,c,a):e.startsWith("prompt/")||e.startsWith("prompts-library")?await this.handlePrompts(e,s,c,a):e.startsWith("chains/")?await this.handleChains(e,s,c):e.startsWith("pinned/")?await this.handlePinned(e,s,c):e.startsWith("announcements")?await this.handleAnnouncements(e,s,c):{success:!0,data:null,message:"Local backend response"}}catch(e){return console.error("üö® LOCAL BACKEND: Error handling request:",e),{success:!1,error:e.message}}}async handleAuth(e,t,a){return"auth/generate-jwt"===e?{success:!0,token:"local-jwt-token-"+Date.now(),expires:Date.now()+864e5}:"auth/jwks"===e?{success:!0,jwks:{keys:[]}}:{success:!0,data:null}}async handlePayments(e,t,a){return"payments/valid/extension"===e?{valid:!0===(await chrome.storage.local.get("DEV_MODE_PREMIUM")).DEV_MODE_PREMIUM}:{valid:!1}}async handleFolders(e,t,a,s){const c=await this.getLocalData("local_folders");switch(e){case"folder/get-all":return{success:!0,data:c};case"folder/get":const e=s.get("folderId");return{success:!0,data:c.find(t=>t.id===e)};case"folder/get-by-id":const n=s.get("folderId");return{success:!0,data:c.find(e=>e.id===n)};case"folder/create":if("POST"===t&&a){const e={...a,id:"folder-"+Date.now(),createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return c.push(e),await this.setLocalData("local_folders",c),{success:!0,data:e}}break;case"folder/update":if("PUT"===t&&a){const e=c.findIndex(e=>e.id===a.id);if(-1!==e)return c[e]={...c[e],...a,updatedAt:(new Date).toISOString()},await this.setLocalData("local_folders",c),{success:!0,data:c[e]}}break;case"folder/delete":if("DELETE"===t&&a){const e=c.filter(e=>e.id!==a.id);return await this.setLocalData("local_folders",e),{success:!0,data:{deleted:!0}}}break;case"folder/pinned":return{success:!0,data:c.filter(e=>e.isPinned)}}return{success:!0,data:[]}}async handlePrompts(e,t,a,s){const c=await this.getLocalData("local_prompts");if("prompts-library"===e)return{success:!0,data:[{id:"default-1",title:"Code Review",content:"Please review this code and provide feedback:",category:"Development"},{id:"default-2",title:"Grammar Check",content:"Please check the grammar and spelling of the following text:",category:"Writing"},{id:"default-3",title:"Explain Code",content:"Please explain what this code does in simple terms:",category:"Development"},...c]};switch(e){case"prompt/get":return{success:!0,data:c};case"prompt/create":if("POST"===t&&a){const e={...a,id:"prompt-"+Date.now(),createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return c.push(e),await this.setLocalData("local_prompts",c),{success:!0,data:e}}break;case"prompt/update":if("PUT"===t&&a){const e=c.findIndex(e=>e.id===a.id);if(-1!==e)return c[e]={...c[e],...a,updatedAt:(new Date).toISOString()},await this.setLocalData("local_prompts",c),{success:!0,data:c[e]}}break;case"prompt/delete":if("DELETE"===t&&a){const e=c.filter(e=>e.id!==a.id);return await this.setLocalData("local_prompts",e),{success:!0,data:{deleted:!0}}}}return{success:!0,data:[]}}async handleChains(e,t,a){const s=await this.getLocalData("local_chains");switch(e){case"chains/get":return{success:!0,data:s};case"chains/create":if("POST"===t&&a){const e={...a,id:"chain-"+Date.now(),createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return s.push(e),await this.setLocalData("local_chains",s),{success:!0,data:e}}break;case"chains/update":if("PUT"===t&&a){const e=s.findIndex(e=>e.id===a.id);if(-1!==e)return s[e]={...s[e],...a,updatedAt:(new Date).toISOString()},await this.setLocalData("local_chains",s),{success:!0,data:s[e]}}break;case"chains/delete":if("DELETE"===t&&a){const e=s.filter(e=>e.id!==a.id);return await this.setLocalData("local_chains",e),{success:!0,data:{deleted:!0}}}}return{success:!0,data:[]}}async handlePinned(e,t,a){const s=await this.getLocalData("local_pinned");switch(e){case"pinned/get":return{success:!0,data:s};case"pinned/pin":if("POST"===t&&a){const e={...a,id:"pinned-"+Date.now(),pinnedAt:(new Date).toISOString()};return s.push(e),await this.setLocalData("local_pinned",s),{success:!0,data:e}}break;case"pinned/unpin":if("DELETE"===t&&a){const e=s.filter(e=>e.id!==a.id);return await this.setLocalData("local_pinned",e),{success:!0,data:{deleted:!0}}}}return{success:!0,data:[]}}async handleAnnouncements(e,t,a){const s=await this.getLocalData("local_announcements");return{success:!0,data:[{id:"local-1",title:"Local Mode Active",content:"You are running in local development mode. All data is stored locally.",type:"info",date:(new Date).toISOString(),isRead:!1},...s]}}async getLocalData(e){try{const t=await chrome.storage.local.get(e);return t&&t[e]?t[e]:[]}catch(t){return console.warn(`üö® LOCAL BACKEND: Failed to get data for ${e}:`,t),[]}}async setLocalData(e,t){await chrome.storage.local.set({[e]:t})}async localFetch(e,t={}){return e.includes("api.infi-dev.com/example-removed/")?(console.log(`üîÑ LOCAL BACKEND: Redirecting ${e} to local handler`),{ok:!0,json:async()=>await this.interceptApiCall(e,t),text:async()=>JSON.stringify(await this.interceptApiCall(e,t))}):fetch(e,t)}}const localBackend=new LocalBackend,originalFetch=window.fetch;window.fetch=function(e,t){return"string"==typeof e&&e.includes("api.infi-dev.com/example-removed/")?localBackend.localFetch(e,t):originalFetch.apply(this,arguments)},"undefined"!=typeof window&&(window.localBackend=localBackend),console.log("üè† LOCAL BACKEND: Local backend service initialized"),console.log("üîÑ All API calls to api.infi-dev.com/example-removed/ will be handled locally");