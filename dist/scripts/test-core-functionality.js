!function(){"use strict";console.log("🎯 TESTING CORE FUNCTIONALITY - Folder and Chat Retrieval"),console.log("This tests the PRIMARY USE CASE that the user reported as broken");const e={folderRetrieval:null,chatRetrieval:null,apiConnectivity:null,realApiBridge:null,timestamp:(new Date).toISOString()};async function o(){try{return console.log("🚀 Starting core functionality tests..."),await async function(){console.log("\n🔌 TEST 1: API Connectivity to infi-dev backend");try{const o=await fetch("https://api.infi-dev.com/example-removed/folder/get",{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});return e.apiConnectivity={status:"SUCCESS",canConnect:!0,httpStatus:o.status,blocked:!1,error:null},console.log("✅ API connectivity test PASSED"),console.log(`   HTTP Status: ${o.status}`),console.log("   Extension is NOT blocking essential API calls"),!0}catch(o){return"BLOCKED_BY_UNIFIED_FIX"===o.code||o.message.includes("UNIFIED BLOCK")?(e.apiConnectivity={status:"BLOCKED",canConnect:!1,httpStatus:null,blocked:!0,error:o.message},console.error("❌ API connectivity test FAILED - BLOCKED BY EXTENSION"),console.error("   This is the ROOT CAUSE of the broken functionality"),console.error("   Error:",o.message),!1):(e.apiConnectivity={status:"NETWORK_ERROR",canConnect:!0,httpStatus:null,blocked:!1,error:o.message},console.log("✅ API connectivity test PASSED (network error expected)"),console.log("   Extension is not blocking, network error is normal"),console.log("   Error:",o.message),!0)}}(),await async function(){console.log("\n📁 TEST 2: Folder Retrieval Functions");const o=[];if("function"==typeof window.getUserFolders)try{console.log("Testing window.getUserFolders()...");const e=await window.getUserFolders();o.push({function:"getUserFolders",status:"SUCCESS",result:e,error:null}),console.log("✅ getUserFolders() executed successfully"),console.log("   Result:",e)}catch(e){o.push({function:"getUserFolders",status:"ERROR",result:null,error:e.message}),console.error("❌ getUserFolders() failed:",e.message)}else console.warn("⚠️ getUserFolders function not found on window");if("function"==typeof window.getAllUserFolders)try{console.log("Testing window.getAllUserFolders()...");const e=await window.getAllUserFolders();o.push({function:"getAllUserFolders",status:"SUCCESS",result:e,error:null}),console.log("✅ getAllUserFolders() executed successfully"),console.log("   Result:",e)}catch(e){o.push({function:"getAllUserFolders",status:"ERROR",result:null,error:e.message}),console.error("❌ getAllUserFolders() failed:",e.message)}else console.warn("⚠️ getAllUserFolders function not found on window");return e.folderRetrieval={tests:o,overallStatus:o.some(e=>"SUCCESS"===e.status)?"PARTIAL_SUCCESS":"FAILED"},o.length>0&&o.some(e=>"SUCCESS"===e.status)}(),await async function(){console.log("\n💬 TEST 3: Chat/Conversation Retrieval Functions");const o=[];if("function"==typeof window.getConversations)try{console.log("Testing window.getConversations()...");const e=await window.getConversations();o.push({function:"getConversations",status:"SUCCESS",result:e,error:null}),console.log("✅ getConversations() executed successfully"),console.log("   Result:",e)}catch(e){o.push({function:"getConversations",status:"ERROR",result:null,error:e.message}),console.error("❌ getConversations() failed:",e.message)}else console.warn("⚠️ getConversations function not found on window");return e.chatRetrieval={tests:o,overallStatus:o.some(e=>"SUCCESS"===e.status)?"PARTIAL_SUCCESS":"FAILED"},o.length>0&&o.some(e=>"SUCCESS"===e.status)}(),await async function(){console.log("\n🌉 TEST 4: Real API Bridge (Fallback System)");const o=[];if("function"==typeof window.realGetUserFolders)try{console.log("Testing window.realGetUserFolders()...");const e=await window.realGetUserFolders();o.push({function:"realGetUserFolders",status:"SUCCESS",result:e,error:null}),console.log("✅ realGetUserFolders() executed successfully"),console.log("   Result:",e)}catch(e){o.push({function:"realGetUserFolders",status:"ERROR",result:null,error:e.message}),console.error("❌ realGetUserFolders() failed:",e.message)}else console.warn("⚠️ realGetUserFolders function not found on window");if("function"==typeof window.realGetConversations)try{console.log("Testing window.realGetConversations()...");const e=await window.realGetConversations();o.push({function:"realGetConversations",status:"SUCCESS",result:e,error:null}),console.log("✅ realGetConversations() executed successfully"),console.log("   Result:",e)}catch(e){o.push({function:"realGetConversations",status:"ERROR",result:null,error:e.message}),console.error("❌ realGetConversations() failed:",e.message)}else console.warn("⚠️ realGetConversations function not found on window");return e.realApiBridge={tests:o,overallStatus:o.some(e=>"SUCCESS"===e.status)?"PARTIAL_SUCCESS":"FAILED"},o.length>0&&o.some(e=>"SUCCESS"===e.status)}(),function(){console.log("\n🎯 CORE FUNCTIONALITY TEST REPORT"),console.log("====================================="),console.log("This tests the PRIMARY USE CASE: Retrieving folders and chats from ChatGPT"),console.log("\n🔌 API Connectivity:"),e.apiConnectivity&&(e.apiConnectivity.blocked?(console.error("   ❌ CRITICAL: API calls are being BLOCKED by the extension"),console.error("   This is the ROOT CAUSE of the broken functionality"),console.error("   The selective blocking fix did NOT work correctly")):(console.log("   ✅ API calls are NOT being blocked (good)"),console.log("   The selective blocking fix is working"))),console.log("\n📁 Folder Retrieval:"),e.folderRetrieval&&(console.log(`   Status: ${e.folderRetrieval.overallStatus}`),e.folderRetrieval.tests.forEach(e=>{const o="SUCCESS"===e.status?"✅":"❌";console.log(`   ${o} ${e.function}: ${e.status}`)})),console.log("\n💬 Chat Retrieval:"),e.chatRetrieval&&(console.log(`   Status: ${e.chatRetrieval.overallStatus}`),e.chatRetrieval.tests.forEach(e=>{const o="SUCCESS"===e.status?"✅":"❌";console.log(`   ${o} ${e.function}: ${e.status}`)})),console.log("\n🌉 Real API Bridge (Fallback):"),e.realApiBridge&&(console.log(`   Status: ${e.realApiBridge.overallStatus}`),e.realApiBridge.tests.forEach(e=>{const o="SUCCESS"===e.status?"✅":"❌";console.log(`   ${o} ${e.function}: ${e.status}`)})),console.log("\n📊 OVERALL ASSESSMENT:");const o=e.apiConnectivity&&!e.apiConnectivity.blocked,t=e.folderRetrieval&&"FAILED"!==e.folderRetrieval.overallStatus,s=e.chatRetrieval&&"FAILED"!==e.chatRetrieval.overallStatus;return o&&(t||s)?(console.log("🎉 SUCCESS: Core functionality is working!"),console.log("   The extension can retrieve folders and/or chats from ChatGPT")):o?(console.warn("⚠️ PARTIAL FAILURE: API works but functions are not available"),console.warn("   The extension scripts may not be loaded correctly")):(console.error("❌ CRITICAL FAILURE: API connectivity is blocked"),console.error("   The selective blocking fix needs to be adjusted"),console.error("   Essential API endpoints are still being blocked")),window.coreTestResults=e,e}()}catch(e){return console.error("❌ Core test execution error:",e),null}}window.testCoreFunctionality=o,console.log("🎯 Starting core functionality tests..."),o().then(()=>{console.log("\n✅ Core functionality tests completed!"),console.log("Results stored in window.coreTestResults"),console.log("Run window.testCoreFunctionality() to test again")})}();