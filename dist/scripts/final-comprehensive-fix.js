!function(){"use strict";function e(){console.log("[Final Fix] Initializing all final fixes..."),function(){const e=window.onerror,n=window.onunhandledrejection;window.onerror=function(n,o,i,t,l){return n&&(n.includes("Extension context invalidated")||n.includes("Illegal invocation")||n.includes("CORS policy")||n.includes("blocked by CORS")||n.includes("Cannot read properties of undefined"))?(console.log("[Final Fix] Suppressed known error:",n),!0):e?e.call(this,n,o,i,t,l):void 0},window.onunhandledrejection=function(e){return e.reason&&e.reason.message&&(e.reason.message.includes("Extension context invalidated")||e.reason.message.includes("CORS policy")||e.reason.message.includes("blocked by CORS"))?(console.log("[Final Fix] Suppressed unhandled rejection:",e.reason.message),void e.preventDefault()):n?n.call(this,e):void 0},console.log("[Final Fix] Error suppression installed")}(),function(){if("undefined"!=typeof chrome){const e=chrome.runtime;Object.defineProperty(chrome,"runtime",{get:function(){try{if(e&&e.id)return e}catch(e){console.log("[Final Fix] Runtime access failed, using mock")}return{id:"mock-extension-id",lastError:null,getManifest:()=>({name:"Ishka",version:"1.0"}),sendMessage:()=>Promise.resolve(),onMessage:{addListener:()=>{},removeListener:()=>{}}}},configurable:!0}),console.log("[Final Fix] Chrome runtime override installed")}}(),function(){if(window.fetch){const e=window.fetch;window.fetch=function(...n){try{return e.apply(window,n)}catch(o){if(o.message.includes("Illegal invocation"))return console.log("[Final Fix] Fixed fetch illegal invocation"),e.call(window,...n);throw o}}}["setTimeout","setInterval","clearTimeout","clearInterval"].forEach(e=>{if(window[e]){const n=window[e];window[e]=function(...o){try{return n.apply(window,o)}catch(i){if(i.message.includes("Illegal invocation"))return console.log(`[Final Fix] Fixed ${e} illegal invocation`),n.call(window,...o);throw i}}}}),console.log("[Final Fix] Function binding fixes installed")}(),function(){const e={DEV_MODE_PREMIUM:!0,MOCK_PREMIUM:!0,isPremiumUser:!0,isPremium:!0,userPlan:"premium",subscriptionStatus:"active",planType:"Premium",premium:!0,subscription:{active:!0,plan:"premium"},premiumStatus:{active:!0,plan:"Premium"}};Object.keys(e).forEach(n=>{window[n]=e[n];try{localStorage.setItem(n,JSON.stringify(e[n]))}catch(e){}}),console.log("[Final Fix] Premium status forced everywhere")}(),function(){const e={getConversations:async()=>(console.log("[Final Fix] getConversations called"),window.realGetConversations?await window.realGetConversations():[]),getUserFolders:async()=>(console.log("[Final Fix] getUserFolders called"),window.realGetUserFolders?await window.realGetUserFolders():[]),getPrompts:async()=>(console.log("[Final Fix] getPrompts called"),window.realGetPrompts?await window.realGetPrompts():[]),getAllUserFolders:async()=>(console.log("[Final Fix] getAllUserFolders called"),window.getUserFolders?await window.getUserFolders():[])};Object.keys(e).forEach(n=>{window[n]||(window[n]=e[n],console.log(`[Final Fix] Created ${n} function`))})}(),function(){const e=[/api\.infi-dev\.com/i,/auth\.openai\.com.*jwks/i,/external-api/i,/remote-backend/i],n=window.fetch;window.fetch=function(o,i){const t=o.toString();return e.some(e=>e.test(t))?(console.log("[Final Fix] Blocked problematic request:",t),Promise.resolve(new Response('{"blocked": true}',{status:200,headers:{"Content-Type":"application/json"}}))):n.apply(window,arguments)},console.log("[Final Fix] Problematic request blocking installed")}(),window.finalFixesComplete=!0,console.log("[Final Fix] âœ… All final fixes completed successfully");try{window.dispatchEvent(new CustomEvent("finalFixesComplete",{detail:{timestamp:Date.now()}}))}catch(e){console.log("[Final Fix] Event dispatch failed, but fixes are active")}}console.log("[Final Fix] Starting final comprehensive fixes..."),e(),"loading"===document.readyState&&document.addEventListener("DOMContentLoaded",e),setTimeout(e,1e3)}();