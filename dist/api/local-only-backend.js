class LocalOnlyBackend{constructor(){this.isEnabled=!1,this.requestLog=[],this.originalFetch=null,this.storage={folders:[],prompts:[],chains:[],settings:{},userData:{id:"local-user",isPremium:!0,subscriptionStatus:"active",features:["all"]}}}async init(){try{console.log("🏠 LOCAL-ONLY BACKEND: Initializing completely free, local-only mode"),console.log("🔍 DEBUG: Chrome storage available =",!!chrome?.storage),console.log("🔍 DEBUG: Window properties before init:",{isResetChatHistory:typeof window.isResetChatHistory,local_folders:typeof window.local_folders,conversations:typeof window.conversations,timestamp:(new Date).toISOString()}),await this.initializeLocalStorage(),this.enable(),console.log("✅ LOCAL-ONLY BACKEND: All features enabled locally"),console.log("🔍 DEBUG: Window properties after init:",{isResetChatHistory:typeof window.isResetChatHistory,local_folders:typeof window.local_folders,conversations:typeof window.conversations,timestamp:(new Date).toISOString()})}catch(e){console.error("❌ LOCAL-ONLY BACKEND: Initialization error:",e),console.log("🔍 DEBUG: Error details:",{message:e.message,stack:e.stack,chromeStorage:!!chrome?.storage,timestamp:(new Date).toISOString()})}}async initializeLocalStorage(){try{console.log("🔧 LOCAL-ONLY BACKEND: Starting storage initialization...");const e=["local_folders","local_prompts","local_chains","local_user_data","local_settings"],t={local_folders:[],local_prompts:[],local_chains:[],local_user_data:null,local_settings:{}};let s;window.storageUtils&&window.storageUtils.isAvailable()?(console.log("🔧 LOCAL-ONLY BACKEND: Using robust storage utilities"),s=await window.storageUtils.safeGet(e,t)):(console.log("🔧 LOCAL-ONLY BACKEND: Using direct Chrome storage access"),window.chrome&&window.chrome.storage&&window.chrome.storage.local?(s=await chrome.storage.local.get(e),s={...t,...s}):(console.warn("⚠️ LOCAL-ONLY BACKEND: Chrome storage not available, using defaults"),s=t)),console.log("🔍 DEBUG: Retrieved storage data:",{hasLocalFolders:!!s.local_folders,hasLocalPrompts:!!s.local_prompts,hasLocalChains:!!s.local_chains,hasUserData:!!s.local_user_data,hasSettings:!!s.local_settings,timestamp:(new Date).toISOString()}),this.storage.folders=s.local_folders||[],s.local_folders||(window.storageUtils?await window.storageUtils.safeSet({local_folders:this.storage.folders}):window.chrome?.storage?.local&&await chrome.storage.local.set({local_folders:this.storage.folders})),this.storage.prompts=s.local_prompts||[],s.local_prompts||(window.storageUtils?await window.storageUtils.safeSet({local_prompts:this.storage.prompts}):window.chrome?.storage?.local&&await chrome.storage.local.set({local_prompts:this.storage.prompts})),this.storage.chains=s.local_chains||[],s.local_chains||(window.storageUtils?await window.storageUtils.safeSet({local_chains:this.storage.chains}):window.chrome?.storage?.local&&await chrome.storage.local.set({local_chains:this.storage.chains}));const o={id:"local-user",isPremium:!0,isPaid:!0,subscriptionStatus:"active",subscriptionType:"premium",planType:"premium",features:["folders","prompts","chains","export","search","media"],expiryDate:new Date(Date.now()+31536e6).toISOString()};window.storageUtils?await window.storageUtils.safeSet({local_user_data:o}):window.chrome?.storage?.local&&await chrome.storage.local.set({local_user_data:o}),this.storage.userData=o,s.local_settings?this.storage.settings=s.local_settings:(this.storage.settings={theme:"auto",language:"en",features:{allEnabled:!0,premiumFeaturesEnabled:!0}},window.storageUtils?await window.storageUtils.safeSet({local_settings:this.storage.settings}):window.chrome?.storage?.local&&await chrome.storage.local.set({local_settings:this.storage.settings})),console.log("🔧 LOCAL-ONLY BACKEND: Local storage initialized")}catch(e){console.error("❌ LOCAL-ONLY BACKEND: Storage initialization error:",e)}}enable(){this.isEnabled||(this.isEnabled=!0,this.originalFetch=window.fetch,window.fetch=this.localFetch.bind(this),console.log("🔄 LOCAL-ONLY BACKEND: All API calls redirected to local storage"))}disable(){this.isEnabled&&(this.isEnabled=!1,this.originalFetch&&(window.fetch=this.originalFetch,this.originalFetch=null),console.log("🔄 LOCAL-ONLY BACKEND: Disabled"))}async localFetch(e,t={}){const s=e;return this.requestLog.push({url:s,method:t.method||"GET",timestamp:(new Date).toISOString(),redirected:!0}),this.shouldInterceptRequest(e)?this.handleLocalRequest(e,t):this.originalFetch.call(window,e,t)}shouldInterceptRequest(e){return["api.infi-dev.com","/payments/","/auth/","/user/","/subscription/","/folder/","/prompt/","/chain/","/premium/"].some(t=>e.includes(t))}async handleLocalRequest(e,t){const s=t.method||"GET";let o=null;try{o=e.includes("/auth/")?{valid:!0,success:!0,jwt:"local-jwt-token",user:this.storage.userData,token:"local-auth-token"}:e.includes("/payments/")||e.includes("/subscription/")?{valid:!0,isPremiumUser:!0,isPaid:!0,subscriptionStatus:"active",subscriptionType:"premium",planType:"premium",expiryDate:new Date(Date.now()+31536e6).toISOString(),features:["all"],limits:null}:e.includes("/folder/")?await this.handleFolderRequest(e,s,t):e.includes("/prompt/")?await this.handlePromptRequest(e,s,t):e.includes("/chain/")?await this.handleChainRequest(e,s,t):e.includes("/user/")?{success:!0,user:this.storage.userData}:{success:!0,message:"Local-only mode: Request handled locally"};const a=new Response(JSON.stringify(o),{status:200,statusText:"OK",headers:{"Content-Type":"application/json","X-Local-Only-Backend":"true"}});return console.log(`🔄 LOCAL-ONLY BACKEND: ${s} ${e} -> Local response`),a}catch(e){return console.error("❌ LOCAL-ONLY BACKEND: Error handling request:",e),new Response(JSON.stringify({success:!1,error:e.message,localMode:!0}),{status:500,statusText:"Internal Server Error",headers:{"Content-Type":"application/json","X-Local-Only-Backend":"true"}})}}async handleFolderRequest(e,t,s){const o=s.body?JSON.parse(s.body):null;if(e.includes("/get-all")||e.includes("/get"))return{success:!0,folders:this.storage.folders};if(e.includes("/create")&&"POST"===t){const e={id:Date.now().toString(),name:o.name||"New Folder",description:o.description||"",created:(new Date).toISOString(),...o};return this.storage.folders.push(e),await chrome.storage.local.set({local_folders:this.storage.folders}),{success:!0,folder:e}}if(e.includes("/update")&&"PUT"===t){const t=this.extractIdFromUrl(e),s=this.storage.folders.findIndex(e=>e.id===t);if(-1!==s)return this.storage.folders[s]={...this.storage.folders[s],...o},await chrome.storage.local.set({local_folders:this.storage.folders}),{success:!0,folder:this.storage.folders[s]}}else if(e.includes("/delete")&&"DELETE"===t){const t=this.extractIdFromUrl(e);return this.storage.folders=this.storage.folders.filter(e=>e.id!==t),await chrome.storage.local.set({local_folders:this.storage.folders}),{success:!0}}return{success:!0,folders:this.storage.folders}}async handlePromptRequest(e,t,s){const o=s.body?JSON.parse(s.body):null;if(e.includes("/get-all")||e.includes("/get"))return{success:!0,prompts:this.storage.prompts};if(e.includes("/create")&&"POST"===t){const e={id:Date.now().toString(),name:o.name||"New Prompt",content:o.content||"",category:o.category||"general",created:(new Date).toISOString(),...o};return this.storage.prompts.push(e),await chrome.storage.local.set({local_prompts:this.storage.prompts}),{success:!0,prompt:e}}if(e.includes("/update")&&"PUT"===t){const t=this.extractIdFromUrl(e),s=this.storage.prompts.findIndex(e=>e.id===t);if(-1!==s)return this.storage.prompts[s]={...this.storage.prompts[s],...o},await chrome.storage.local.set({local_prompts:this.storage.prompts}),{success:!0,prompt:this.storage.prompts[s]}}else if(e.includes("/delete")&&"DELETE"===t){const t=this.extractIdFromUrl(e);return this.storage.prompts=this.storage.prompts.filter(e=>e.id!==t),await chrome.storage.local.set({local_prompts:this.storage.prompts}),{success:!0}}return{success:!0,prompts:this.storage.prompts}}async handleChainRequest(e,t,s){const o=s.body?JSON.parse(s.body):null;if(e.includes("/get-all")||e.includes("/get"))return{success:!0,chains:this.storage.chains};if(e.includes("/create")&&"POST"===t){const e={id:Date.now().toString(),name:o.name||"New Chain",prompts:o.prompts||[],created:(new Date).toISOString(),...o};return this.storage.chains.push(e),await chrome.storage.local.set({local_chains:this.storage.chains}),{success:!0,chain:e}}if(e.includes("/update")&&"PUT"===t){const t=this.extractIdFromUrl(e),s=this.storage.chains.findIndex(e=>e.id===t);if(-1!==s)return this.storage.chains[s]={...this.storage.chains[s],...o},await chrome.storage.local.set({local_chains:this.storage.chains}),{success:!0,chain:this.storage.chains[s]}}else if(e.includes("/delete")&&"DELETE"===t){const t=this.extractIdFromUrl(e);return this.storage.chains=this.storage.chains.filter(e=>e.id!==t),await chrome.storage.local.set({local_chains:this.storage.chains}),{success:!0}}return{success:!0,chains:this.storage.chains}}extractIdFromUrl(e){const t=e.match(/\/([^\/]+)$/);return t?t[1]:null}getRequestLog(){return this.requestLog}clearRequestLog(){this.requestLog=[]}getStorageStats(){return{folders:this.storage.folders.length,prompts:this.storage.prompts.length,chains:this.storage.chains.length,userData:this.storage.userData,settings:this.storage.settings}}}const localOnlyBackend=new LocalOnlyBackend;"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>localOnlyBackend.init()):localOnlyBackend.init(),window.localOnlyBackend=localOnlyBackend,console.log("🏠 LOCAL-ONLY BACKEND: System loaded - All features free and local");