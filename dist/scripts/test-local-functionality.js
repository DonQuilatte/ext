!function(){"use strict";console.log("🏠 TESTING LOCAL FUNCTIONALITY - Complete offline operation"),console.log("This validates that the extension works WITHOUT any external API dependencies");const e={externalAPIBlocked:null,realApiBridgeLoaded:null,localFolderRetrieval:null,localChatRetrieval:null,localPromptRetrieval:null,unifiedFunctionsWork:null,timestamp:(new Date).toISOString()};async function o(){try{return console.log("🚀 Starting local functionality tests..."),await async function(){console.log("\n🚫 TEST 1: External API Blocking");const o=["https://api.infi-dev.com/example-removed/folder/get","https://api.infi-dev.com/example-removed/conversation/get","https://api.infi-dev.com/example-removed/auth/generate-jwt","https://api.infi-dev.com/example-removed/auth/jwks","https://api.infi-dev.com/example-removed/subscription/check"];let t=!0;const l=[];for(const e of o)try{console.log(`Testing external API: ${e}`);const o=await fetch(e),n=await o.text();200!==o.status||"[]"!==n&&!n.includes("mock")?(console.error(`❌ External API not blocked: ${e}`),l.push({endpoint:e,status:"NOT_BLOCKED",blocked:!1}),t=!1):(console.log(`✅ External API mocked correctly: ${e}`),l.push({endpoint:e,status:"MOCKED",blocked:!0}))}catch(o){"BLOCKED_BY_UNIFIED_FIX"===o.code||o.message.includes("UNIFIED BLOCK")?(console.log(`✅ External API blocked correctly: ${e}`),l.push({endpoint:e,status:"BLOCKED",blocked:!0})):(console.warn(`⚠️ External API had unexpected error: ${e}`,o.message),l.push({endpoint:e,status:"ERROR",blocked:!0,error:o.message}))}return e.externalAPIBlocked={allBlocked:t,results:l,status:t?"SUCCESS":"FAILED"},t}(),await async function(){console.log("\n🌉 TEST 2: Real API Bridge Loading");const o=["realGetConversations","realGetUserFolders","realGetPrompts"];let t=!0;const l=[];for(const e of o)"function"==typeof window[e]?(console.log(`✅ Real API Bridge function loaded: ${e}`),l.push({function:e,loaded:!0})):(console.error(`❌ Real API Bridge function missing: ${e}`),l.push({function:e,loaded:!1}),t=!1);if(!t){console.log("🔄 Attempting to load Real API Bridge...");try{const e=document.createElement("script");e.src=chrome.runtime.getURL("scripts/real-api-bridge.js"),document.head.appendChild(e),await new Promise(e=>setTimeout(e,2e3)),t=!0;for(const e of o)if("function"!=typeof window[e]){t=!1;break}t?console.log("✅ Real API Bridge loaded successfully"):console.error("❌ Real API Bridge failed to load")}catch(e){console.error("❌ Error loading Real API Bridge:",e),t=!1}}return e.realApiBridgeLoaded={allLoaded:t,results:l,status:t?"SUCCESS":"FAILED"},t}(),await async function(){console.log("\n📁 TEST 3: Local Folder Retrieval from ChatGPT DOM");try{if("function"==typeof window.realGetUserFolders){console.log("Testing realGetUserFolders...");const o=await window.realGetUserFolders();return e.localFolderRetrieval={status:"SUCCESS",folderCount:o.length,folders:o,error:null},console.log(`✅ Local folder retrieval successful: ${o.length} folders found`),console.log("Folders:",o.map(e=>e.name)),!0}throw new Error("realGetUserFolders function not available")}catch(o){return e.localFolderRetrieval={status:"FAILED",folderCount:0,folders:[],error:o.message},console.error("❌ Local folder retrieval failed:",o.message),!1}}(),await async function(){console.log("\n💬 TEST 4: Local Chat Retrieval from ChatGPT DOM");try{if("function"==typeof window.realGetConversations){console.log("Testing realGetConversations...");const o=await window.realGetConversations();return e.localChatRetrieval={status:"SUCCESS",conversationCount:o.length,conversations:o.slice(0,3),error:null},console.log(`✅ Local chat retrieval successful: ${o.length} conversations found`),o.length>0&&console.log("Sample conversations:",o.slice(0,3).map(e=>e.title)),!0}throw new Error("realGetConversations function not available")}catch(o){return e.localChatRetrieval={status:"FAILED",conversationCount:0,conversations:[],error:o.message},console.error("❌ Local chat retrieval failed:",o.message),!1}}(),await async function(){console.log("\n📝 TEST 5: Local Prompt Retrieval");try{if("function"==typeof window.realGetPrompts){console.log("Testing realGetPrompts...");const o=await window.realGetPrompts();return e.localPromptRetrieval={status:"SUCCESS",promptCount:o.length,prompts:o,error:null},console.log(`✅ Local prompt retrieval successful: ${o.length} prompts found`),console.log("Prompts:",o.map(e=>e.title)),!0}throw new Error("realGetPrompts function not available")}catch(o){return e.localPromptRetrieval={status:"FAILED",promptCount:0,prompts:[],error:o.message},console.error("❌ Local prompt retrieval failed:",o.message),!1}}(),await async function(){console.log("\n🔧 TEST 6: Unified Extension Functions");const o=[];try{console.log("Testing window.getUserFolders...");const e=await window.getUserFolders();o.push({function:"getUserFolders",status:"SUCCESS",resultCount:e.length,result:e.slice(0,2)}),console.log(`✅ getUserFolders: ${e.length} folders`)}catch(e){o.push({function:"getUserFolders",status:"FAILED",error:e.message}),console.error("❌ getUserFolders failed:",e.message)}try{console.log("Testing window.getConversations...");const e=await window.getConversations();o.push({function:"getConversations",status:"SUCCESS",resultCount:e.length,result:e.slice(0,2)}),console.log(`✅ getConversations: ${e.length} conversations`)}catch(e){o.push({function:"getConversations",status:"FAILED",error:e.message}),console.error("❌ getConversations failed:",e.message)}try{console.log("Testing window.getPrompts...");const e=await window.getPrompts();o.push({function:"getPrompts",status:"SUCCESS",resultCount:e.length,result:e.slice(0,2)}),console.log(`✅ getPrompts: ${e.length} prompts`)}catch(e){o.push({function:"getPrompts",status:"FAILED",error:e.message}),console.error("❌ getPrompts failed:",e.message)}const t=o.every(e=>"SUCCESS"===e.status);return e.unifiedFunctionsWork={allPassed:t,tests:o,status:t?"SUCCESS":"FAILED"},t}(),function(){if(console.log("\n🏠 LOCAL FUNCTIONALITY TEST REPORT"),console.log("====================================="),console.log("This validates that the extension works WITHOUT external API dependencies"),console.log("\n🚫 External API Blocking:"),e.externalAPIBlocked&&(e.externalAPIBlocked.allBlocked?(console.log("   ✅ ALL external API calls are blocked/mocked (good)"),console.log("   Extension is forced to use local functionality only")):(console.error("   ❌ Some external API calls are not blocked"),console.error("   Extension may still try to use external APIs"))),console.log("\n🌉 Real API Bridge:"),e.realApiBridgeLoaded&&(e.realApiBridgeLoaded.allLoaded?console.log("   ✅ Real API Bridge functions are loaded and available"):console.error("   ❌ Real API Bridge functions are missing")),console.log("\n📊 Local Data Retrieval:"),e.localFolderRetrieval){const o=e.localFolderRetrieval.status,t=e.localFolderRetrieval.folderCount;console.log(`   📁 Folders: ${o} (${t} found)`)}if(e.localChatRetrieval){const o=e.localChatRetrieval.status,t=e.localChatRetrieval.conversationCount;console.log(`   💬 Conversations: ${o} (${t} found)`)}if(e.localPromptRetrieval){const o=e.localPromptRetrieval.status,t=e.localPromptRetrieval.promptCount;console.log(`   📝 Prompts: ${o} (${t} found)`)}console.log("\n🔧 Unified Extension Functions:"),e.unifiedFunctionsWork&&(e.unifiedFunctionsWork.allPassed?(console.log("   ✅ All unified functions work correctly"),e.unifiedFunctionsWork.tests.forEach(e=>{console.log(`   ✅ ${e.function}: ${e.resultCount} items`)})):(console.error("   ❌ Some unified functions failed"),e.unifiedFunctionsWork.tests.forEach(e=>{const o="SUCCESS"===e.status?"✅":"❌";console.log(`   ${o} ${e.function}: ${e.status}`)}))),console.log("\n📊 OVERALL ASSESSMENT:");const o=e.externalAPIBlocked?.allBlocked,t=e.realApiBridgeLoaded?.allLoaded,l=e.unifiedFunctionsWork?.allPassed;return"SUCCESS"===e.localFolderRetrieval?.status||e.localChatRetrieval,o&&t&&l?(console.log("🎉 SUCCESS: Extension works completely locally!"),console.log("   ✅ No external API dependencies"),console.log("   ✅ Real API Bridge extracts data from ChatGPT DOM"),console.log("   ✅ All extension functions work correctly"),console.log("   ✅ PRIMARY USE CASE: Folder and chat retrieval works locally")):(console.warn("⚠️ PARTIAL SUCCESS: Some issues detected"),o||console.error("   ❌ External APIs not fully blocked"),t||console.error("   ❌ Real API Bridge not loaded"),l||console.error("   ❌ Extension functions not working")),window.localTestResults=e,e}()}catch(e){return console.error("❌ Local test execution error:",e),null}}window.testLocalFunctionality=o,console.log("🏠 Starting local functionality tests..."),o().then(()=>{console.log("\n✅ Local functionality tests completed!"),console.log("Results stored in window.localTestResults"),console.log("Run window.testLocalFunctionality() to test again")})}();