!function(){"use strict";console.log("🧪 TESTING SELECTIVE BLOCKING - Starting comprehensive API test");const e={essentialAPIs:{},problematicAPIs:{},summary:{essentialPassed:0,essentialFailed:0,problematicBlocked:0,problematicAllowed:0}},o=["https://api.infi-dev.com/example-removed/folder/get","https://api.infi-dev.com/example-removed/folder/list","https://api.infi-dev.com/example-removed/conversation/get","https://api.infi-dev.com/example-removed/conversation/list","https://api.infi-dev.com/example-removed/auth/generate-jwt","https://api.infi-dev.com/example-removed/prompts/get","https://api.infi-dev.com/example-removed/user/profile"],s=["https://api.infi-dev.com/example-removed/auth/jwks","https://api.infi-dev.com/example-removed/subscription/check","https://api.infi-dev.com/example-removed/auth/validate","https://api.infi-dev.com/example-removed/auth/jwks?cacheBuster=123","https://api.infi-dev.com/example-removed/test?jwksuri=something"];async function t(){try{return await async function(){console.log("🔍 Testing essential endpoints (should be ALLOWED)...");for(const s of o)try{console.log(`Testing essential: ${s}`),await fetch(s,{method:"GET",headers:{"Content-Type":"application/json"}}),e.essentialAPIs[s]={status:"ALLOWED",method:"fetch",blocked:!1,error:null},e.summary.essentialPassed++,console.log(`✅ Essential endpoint ALLOWED: ${s}`)}catch(o){"BLOCKED_BY_UNIFIED_FIX"===o.code||o.message.includes("UNIFIED BLOCK")?(e.essentialAPIs[s]={status:"BLOCKED",method:"fetch",blocked:!0,error:o.message},e.summary.essentialFailed++,console.error(`❌ Essential endpoint BLOCKED (should be allowed): ${s}`,o.message)):(e.essentialAPIs[s]={status:"ALLOWED",method:"fetch",blocked:!1,error:o.message},e.summary.essentialPassed++,console.log(`✅ Essential endpoint ALLOWED (network error expected): ${s}`))}}(),await async function(){console.log("🚫 Testing problematic endpoints (should be BLOCKED)...");for(const o of s)try{console.log(`Testing problematic: ${o}`),await fetch(o,{method:"GET",headers:{"Content-Type":"application/json"}}),e.problematicAPIs[o]={status:"ALLOWED",method:"fetch",blocked:!1,error:null},e.summary.problematicAllowed++,console.error(`❌ Problematic endpoint ALLOWED (should be blocked): ${o}`)}catch(s){"BLOCKED_BY_UNIFIED_FIX"===s.code||s.message.includes("UNIFIED BLOCK")?(e.problematicAPIs[o]={status:"BLOCKED",method:"fetch",blocked:!0,error:s.message},e.summary.problematicBlocked++,console.log(`✅ Problematic endpoint BLOCKED (correct): ${o}`)):(e.problematicAPIs[o]={status:"UNKNOWN_ERROR",method:"fetch",blocked:!1,error:s.message},console.warn(`⚠️ Problematic endpoint had unexpected error: ${o}`,s.message))}}(),await async function(){return console.log("🔍 Testing XMLHttpRequest blocking..."),new Promise(e=>{const o=new XMLHttpRequest;o.onreadystatechange=function(){4===o.readyState&&(0===o.status&&o.statusText.includes("UNIFIED BLOCK")?console.log("✅ XHR blocking working correctly"):console.log("⚠️ XHR blocking status:",o.status,o.statusText),e())},o.onerror=function(){console.log("✅ XHR error handler triggered (blocking working)"),e()},o.open("GET","https://api.infi-dev.com/example-removed/auth/jwks"),o.send()})}(),await async function(){console.log("🔍 Testing extension API functions...");try{if("function"==typeof window.getUserFolders){console.log("Testing getUserFolders...");const e=await window.getUserFolders();console.log("✅ getUserFolders result:",e)}else console.log("⚠️ getUserFolders function not found");if("function"==typeof window.getConversations){console.log("Testing getConversations...");const e=await window.getConversations();console.log("✅ getConversations result:",e)}else console.log("⚠️ getConversations function not found")}catch(e){console.error("❌ Extension function test error:",e)}}(),function(){console.log("\n📊 SELECTIVE BLOCKING TEST REPORT"),console.log("====================================="),console.log("\n✅ Essential APIs (should be allowed):"),console.log(`   Passed: ${e.summary.essentialPassed}`),console.log(`   Failed: ${e.summary.essentialFailed}`),console.log("\n🚫 Problematic APIs (should be blocked):"),console.log(`   Correctly Blocked: ${e.summary.problematicBlocked}`),console.log(`   Incorrectly Allowed: ${e.summary.problematicAllowed}`);const t=o.length+s.length,n=e.summary.essentialPassed+e.summary.problematicBlocked,l=(n/t*100).toFixed(1);return console.log(`\n📈 Overall Success Rate: ${l}% (${n}/${t})`),e.summary.essentialFailed>0&&(console.error(`\n❌ CRITICAL: ${e.summary.essentialFailed} essential APIs are being blocked!`),console.error("This will break core extension functionality.")),e.summary.problematicAllowed>0&&(console.warn(`\n⚠️ WARNING: ${e.summary.problematicAllowed} problematic APIs are not being blocked!`),console.warn("This may cause infinite loops.")),0===e.summary.essentialFailed&&0===e.summary.problematicAllowed&&(console.log("\n🎉 SUCCESS: Selective blocking is working correctly!"),console.log("Essential APIs are allowed, problematic APIs are blocked.")),window.selectiveBlockingTestResults=e,e}()}catch(e){return console.error("❌ Test execution error:",e),null}}window.testSelectiveBlocking=t,console.log("🚀 Starting selective blocking tests..."),t().then(()=>{console.log("✅ Selective blocking tests completed!"),console.log("Results stored in window.selectiveBlockingTestResults"),console.log("Run window.testSelectiveBlocking() to test again")})}();