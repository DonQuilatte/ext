!function(){"use strict";console.log("üß™ TESTING SCRIPT CONFLICT FIX - Validating unified context fix without conflicts");const e={maxWaitTime:1e4,checkInterval:200,expectedFunctions:["getConversations","getUserFolders","getPrompts","getAllUserFolders"],realApiFunctions:["realGetConversations","realGetUserFolders","realGetPrompts"]};let o={scriptConflicts:[],functionAvailability:{},realApiBridge:{},apiCalls:{},overallStatus:"PENDING"};function n(){console.log("üîç Checking for script conflicts...");const n=[];return window.fixPremiumFeatures&&n.push("fix-premium-features.js still active"),e.expectedFunctions.forEach(e=>{window[e]&&window[e].toString().includes("FixPremium")&&n.push(`${e} still using fix-premium-features implementation`)}),o.scriptConflicts=n,0===n.length?console.log("‚úÖ No script conflicts detected"):console.warn("‚ö†Ô∏è Script conflicts found:",n),0===n.length}function t(){console.log("üîç Checking function availability..."),e.expectedFunctions.forEach(e=>{const n="function"==typeof window[e],t=n?"AVAILABLE":"MISSING";o.functionAvailability[e]={available:n,implementation:t,source:n?window[e].toString().includes("UNIFIED")?"unified-context-fix":"unknown":"none"},console.log(`${n?"‚úÖ":"‚ùå"} ${e}: ${t}`)})}function i(){console.log("üîç Checking Real API Bridge availability..."),e.realApiFunctions.forEach(e=>{const n="function"==typeof window[e];o.realApiBridge[e]={available:n,ready:n&&!0===window.REAL_API_READY},console.log(`${n?"‚úÖ":"‚ùå"} ${e}: ${n?"AVAILABLE":"MISSING"}`)});const n=!0===window.REAL_API_READY;return console.log(`${n?"‚úÖ":"‚ö†Ô∏è"} Real API Bridge Ready: ${n}`),n}async function l(){console.log("üîç Testing API function calls...");for(const n of e.expectedFunctions)if("function"==typeof window[n])try{console.log(`Testing ${n}...`);const e=Date.now(),t=await window[n](),i=Date.now()-e,l=Array.isArray(t),s=t&&t.length>0;o.apiCalls[n]={status:"SUCCESS",duration:i,resultType:Array.isArray(t)?"array":typeof t,resultLength:Array.isArray(t)?t.length:"N/A",hasData:s,isUndefined:void 0===t,sample:s?t[0]:t},void 0===t?console.error(`‚ùå ${n} returned undefined!`):l?s?console.log(`‚úÖ ${n} returned ${t.length} items in ${i}ms`):console.log(`‚ö†Ô∏è ${n} returned empty array (may be normal)`):console.warn(`‚ö†Ô∏è ${n} returned non-array:`,typeof t)}catch(e){o.apiCalls[n]={status:"ERROR",error:e.message,isUndefined:!1},console.error(`‚ùå ${n} failed:`,e.message)}else o.apiCalls[n]={status:"NOT_AVAILABLE",isUndefined:!0},console.error(`‚ùå ${n} not available`)}function s(){console.log("\nüìä SCRIPT CONFLICT FIX TEST REPORT"),console.log("====================================="),console.log("\nüîß Script Conflicts:"),0===o.scriptConflicts.length?console.log("‚úÖ No conflicts detected"):o.scriptConflicts.forEach(e=>{console.log(`‚ùå ${e}`)}),console.log("\nüîß Function Availability:"),Object.entries(o.functionAvailability).forEach(([e,o])=>{console.log(`${o.available?"‚úÖ":"‚ùå"} ${e}: ${o.implementation} (${o.source})`)}),console.log("\nüîß Real API Bridge:"),Object.entries(o.realApiBridge).forEach(([e,o])=>{console.log(`${o.available?"‚úÖ":"‚ùå"} ${e}: ${o.available?"Available":"Missing"}`)}),console.log("\nüîß API Function Calls:"),Object.entries(o.apiCalls).forEach(([e,o])=>{if("SUCCESS"===o.status){const n=o.isUndefined?" ‚ùå UNDEFINED":"";console.log(`‚úÖ ${e}: ${o.resultType} (${o.resultLength} items) ${o.duration}ms${n}`)}else console.log(`‚ùå ${e}: ${o.status} - ${o.error||"Not available"}`)});const n=Object.values(o.apiCalls).some(e=>e.isUndefined),t=o.scriptConflicts.length>0,i=e.expectedFunctions.every(e=>o.functionAvailability[e]?.available);return n||t||!i?(o.overallStatus="FAILED",console.log("\n‚ùå OVERALL STATUS: FAILED - Issues still present"),n&&console.log("   - Functions still returning undefined"),t&&console.log("   - Script conflicts still detected"),i||console.log("   - Some functions not available")):(o.overallStatus="SUCCESS",console.log("\nüéâ OVERALL STATUS: SUCCESS - Script conflict fix resolved undefined errors!")),o}async function a(){console.log("üöÄ Starting script conflict fix tests...");try{n(),t(),await async function(){console.log("‚è≥ Waiting for Real API Bridge to be ready...");const o=Date.now();for(;Date.now()-o<e.maxWaitTime;){if(i())return console.log("‚úÖ Real API Bridge is ready"),!0;await new Promise(o=>setTimeout(o,e.checkInterval))}return console.warn("‚ö†Ô∏è Real API Bridge not ready after timeout"),!1}(),await l();const o=s();window.scriptConflictTestResults=o,window.dispatchEvent(new CustomEvent("scriptConflictTestComplete",{detail:o}))}catch(e){console.error("‚ùå Test execution failed:",e),o.overallStatus="ERROR",o.executionError=e.message}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",a):setTimeout(a,1e3),window.scriptConflictTests={runTests:a,checkScriptConflicts:n,checkFunctionAvailability:t,checkRealApiBridge:i,testApiFunctionCalls:l,generateTestReport:s,getResults:()=>o}}();