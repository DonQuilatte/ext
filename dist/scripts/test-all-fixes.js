!function(){"use strict";console.log("[Test All Fixes] Starting comprehensive fix testing...");const e={emergencyFix:!1,undefinedProperties:!1,corsIssues:!1,devInitSafe:!1,realApiIntegration:!1,premiumFeatures:!1,overallStatus:"TESTING"};function o(){console.log("\n[Test All Fixes] === COMPREHENSIVE TEST REPORT ===");const o=Object.values(e).filter(e=>!0===e).length,s=Object.keys(e).length-1;console.log(`Tests Passed: ${o}/${s}`),console.log("Detailed Results:"),Object.entries(e).forEach(([e,o])=>{if("overallStatus"!==e){const s=o?"✅ PASS":"❌ FAIL";console.log(`  ${e}: ${s}`)}}),o===s?(e.overallStatus="ALL_TESTS_PASSED",console.log("\n🎉 ALL TESTS PASSED - Extension should be working correctly!")):o>=.7*s?(e.overallStatus="MOSTLY_WORKING",console.log("\n⚠️ MOST TESTS PASSED - Extension should be mostly functional")):(e.overallStatus="NEEDS_ATTENTION",console.log("\n❌ MULTIPLE TESTS FAILED - Extension needs attention")),window.testAllFixesResults=e,console.log("\n[Test All Fixes] Test results stored in window.testAllFixesResults"),console.log("[Test All Fixes] === END TEST REPORT ===\n")}function s(){console.log("[Test All Fixes] Running all tests..."),function(){console.log("[Test All Fixes] Testing emergency fix...");try{window.emergencyFixActive?(console.log("✅ Emergency fix is active"),e.emergencyFix=!0):console.log("❌ Emergency fix is not active"),"undefined"!=typeof chrome&&chrome.storage?console.log("✅ Chrome APIs are available"):console.log("⚠️ Chrome APIs may not be fully available")}catch(e){console.error("❌ Emergency fix test failed:",e)}}(),function(){console.log("[Test All Fixes] Testing undefined properties fix...");try{let o=!0;["local_folders","isResetChatHistory","conversations","userFolders","prompts","isPremium","premiumStatus"].forEach(e=>{void 0===window[e]?(console.log(`❌ Property ${e} is undefined`),o=!1):console.log(`✅ Property ${e} is defined:`,typeof window[e])}),o?(console.log("✅ All required properties are defined"),e.undefinedProperties=!0):console.log("❌ Some properties are still undefined");try{window.local_folders.length,console.log("✅ Property access test passed")}catch(e){console.log("❌ Property access test failed:",e.message)}}catch(e){console.error("❌ Undefined properties test failed:",e)}}(),function(){console.log("[Test All Fixes] Testing CORS issues fix...");try{window.corsIssuesFixed?(console.log("✅ CORS fixes are active"),e.corsIssues=!0):console.log("❌ CORS fixes are not active"),fetch("https://api.infi-dev.com/test").then(e=>e.json()).then(e=>{e.blocked_url?console.log("✅ CORS blocking is working correctly"):console.log("⚠️ CORS blocking may not be working")}).catch(e=>{console.log("⚠️ Fetch test error (expected):",e.message)})}catch(e){console.error("❌ CORS issues test failed:",e)}}(),function(){console.log("[Test All Fixes] Testing dev init safe...");try{if("undefined"!=typeof Storage&&localStorage){const o=localStorage.getItem("isPremium");o?(console.log("✅ localStorage premium status:",o),e.devInitSafe=!0):console.log("⚠️ localStorage premium status not set")}else console.log("❌ localStorage not available");"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local&&chrome.storage.local.get(["isPremium"],e=>{chrome.runtime.lastError?console.log("⚠️ Chrome storage error (using fallback):",chrome.runtime.lastError.message):console.log("✅ Chrome storage access working:",e)})}catch(e){console.error("❌ Dev init safe test failed:",e)}}(),function(){console.log("[Test All Fixes] Testing real API integration...");try{let o=!0;["realGetConversations","realGetUserFolders","realGetPrompts"].forEach(e=>{"function"==typeof window[e]?console.log(`✅ Function ${e} is available`):(console.log(`❌ Function ${e} is not available`),o=!1)}),o?(console.log("✅ All real API functions are available"),e.realApiIntegration=!0,"function"==typeof window.realGetConversations&&window.realGetConversations().then(e=>{console.log("✅ Real API call successful, conversations:",e.length)}).catch(e=>{console.log("⚠️ Real API call error:",e.message)})):console.log("❌ Some real API functions are missing")}catch(e){console.error("❌ Real API integration test failed:",e)}}(),function(){console.log("[Test All Fixes] Testing premium features...");try{!0===window.isPremium?console.log("✅ Premium status is active"):console.log("❌ Premium status is not active"),window.premiumStatus&&window.premiumStatus.active?(console.log("✅ Premium status object is valid"),e.premiumFeatures=!0):console.log("❌ Premium status object is invalid"),["getConversations","getUserFolders","getPrompts"].forEach(e=>{"function"==typeof window[e]?console.log(`✅ Premium function ${e} is available`):console.log(`❌ Premium function ${e} is not available`)})}catch(e){console.error("❌ Premium features test failed:",e)}}(),setTimeout(o,1e3)}console.log("[Test All Fixes] Initializing comprehensive testing..."),s(),"loading"===document.readyState&&document.addEventListener("DOMContentLoaded",s),setTimeout(s,2e3),setTimeout(s,5e3),setInterval(()=>{console.log("[Test All Fixes] Running periodic test check..."),s()},3e4)}();