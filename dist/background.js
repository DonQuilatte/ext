/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/background/index.ts":
/*!*********************************!*\
  !*** ./src/background/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _shared_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/state */ \"./src/shared/state/index.ts\");\n/* harmony import */ var _shared_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/api */ \"./src/shared/api/index.ts\");\n/* harmony import */ var _shared_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/utils */ \"./src/shared/utils/index.ts\");\n\n\n\nconsole.log('üöÄ Ishka Extension Background Script Initialized');\nchrome.runtime.onInstalled.addListener(async (details) => {\n    console.log('Extension installed/updated:', details.reason);\n    if (details.reason === 'install') {\n        await _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.resetState();\n        console.log('‚úÖ Initial state set up');\n    }\n    if (details.reason === 'update') {\n        console.log('üîÑ Extension updated, checking for data migration...');\n        await handleUpdate();\n    }\n});\nchrome.runtime.onStartup.addListener(async () => {\n    console.log('üîÑ Extension starting up...');\n    await initializeExtension();\n});\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('üì® Received message:', message);\n    handleMessage(message, sender)\n        .then(sendResponse)\n        .catch((error) => {\n        console.error('‚ùå Error handling message:', error);\n        sendResponse({ error: error.message });\n    });\n    return true;\n});\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete' && tab.url?.includes('chatgpt.com')) {\n        console.log('üìÑ ChatGPT page loaded, injecting content script');\n        injectContentScript(tabId);\n    }\n});\nchrome.storage.onChanged.addListener((changes, namespace) => {\n    console.log('üíæ Storage changed:', changes, namespace);\n    Object.entries(changes).forEach(([key, change]) => {\n        if (change.newValue !== undefined) {\n            _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.setState({ [key]: change.newValue });\n        }\n    });\n});\nasync function handleMessage(message, sender) {\n    const { type, payload } = message;\n    switch (type) {\n        case 'GET_STATE':\n            return { state: _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.getState() };\n        case 'SET_STATE':\n            await _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.setState(payload);\n            return { success: true };\n        case 'API_REQUEST':\n            return await handleAPIRequest(payload);\n        case 'GET_STORAGE':\n            return await _shared_utils__WEBPACK_IMPORTED_MODULE_2__.storageUtils.get(payload.key);\n        case 'SET_STORAGE':\n            await _shared_utils__WEBPACK_IMPORTED_MODULE_2__.storageUtils.set(payload.key, payload.value);\n            return { success: true };\n        case 'CLEAR_STORAGE':\n            await _shared_utils__WEBPACK_IMPORTED_MODULE_2__.storageUtils.clear();\n            return { success: true };\n        case 'GET_EXTENSION_INFO':\n            return {\n                version: chrome.runtime.getManifest().version,\n                name: chrome.runtime.getManifest().name,\n                id: chrome.runtime.id,\n            };\n        default:\n            throw new Error(`Unknown message type: ${type}`);\n    }\n}\nasync function handleAPIRequest(payload) {\n    const { method, endpoint, data } = payload;\n    try {\n        switch (method) {\n            case 'GET_CONVERSATIONS':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getConversations();\n            case 'GET_CONVERSATION':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getConversation(data.id);\n            case 'CREATE_CONVERSATION':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.createConversation(data.title);\n            case 'UPDATE_CONVERSATION':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.updateConversation(data.id, data.updates);\n            case 'DELETE_CONVERSATION':\n                await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.deleteConversation(data.id);\n                return { success: true };\n            case 'GET_FOLDERS':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getFolders();\n            case 'CREATE_FOLDER':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.createFolder(data.name, data.color);\n            case 'UPDATE_FOLDER':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.updateFolder(data.id, data.updates);\n            case 'DELETE_FOLDER':\n                await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.deleteFolder(data.id);\n                return { success: true };\n            case 'GET_PROMPTS':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getPrompts();\n            case 'CREATE_PROMPT':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.createPrompt(data.prompt);\n            case 'UPDATE_PROMPT':\n                return await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.updatePrompt(data.id, data.updates);\n            case 'DELETE_PROMPT':\n                await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.deletePrompt(data.id);\n                return { success: true };\n            default:\n                throw new Error(`Unknown API method: ${method}`);\n        }\n    }\n    catch (error) {\n        console.error('API request failed:', error);\n        throw error;\n    }\n}\nasync function injectContentScript(tabId) {\n    try {\n        await chrome.scripting.executeScript({\n            target: { tabId },\n            files: ['content.js'],\n        });\n        console.log('‚úÖ Content script injected');\n    }\n    catch (error) {\n        console.error('‚ùå Failed to inject content script:', error);\n    }\n}\nasync function initializeExtension() {\n    try {\n        const conversations = await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getConversations();\n        const folders = await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getFolders();\n        const prompts = await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getPrompts();\n        await _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.setState({\n            conversations: {\n                conversations,\n                folders,\n                isLoading: false,\n            },\n        });\n        console.log('‚úÖ Extension initialized successfully');\n    }\n    catch (error) {\n        console.error('‚ùå Failed to initialize extension:', error);\n    }\n}\nasync function handleUpdate() {\n    try {\n        const currentVersion = chrome.runtime.getManifest().version;\n        const storedVersion = await _shared_utils__WEBPACK_IMPORTED_MODULE_2__.storageUtils.get('extension_version');\n        if (storedVersion !== currentVersion) {\n            console.log(`üîÑ Migrating from ${storedVersion} to ${currentVersion}`);\n            await _shared_utils__WEBPACK_IMPORTED_MODULE_2__.storageUtils.set('extension_version', currentVersion);\n            console.log('‚úÖ Migration completed');\n        }\n    }\n    catch (error) {\n        console.error('‚ùå Migration failed:', error);\n    }\n}\nsetInterval(async () => {\n    try {\n        const state = _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.getState();\n        if (state.user.preferences.autoSave) {\n            const conversations = await _shared_api__WEBPACK_IMPORTED_MODULE_1__.apiClient.getConversations();\n            await _shared_state__WEBPACK_IMPORTED_MODULE_0__.stateManager.updateConversations({ conversations });\n        }\n    }\n    catch (error) {\n        console.error('‚ùå Periodic task failed:', error);\n    }\n}, 30000);\nconsole.log('‚úÖ Background script setup complete');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/background/index.ts\n\n}");

/***/ }),

/***/ "./src/shared/api/index.ts":
/*!*********************************!*\
  !*** ./src/shared/api/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGPTAPIClient: () => (/* binding */ ChatGPTAPIClient),\n/* harmony export */   apiClient: () => (/* binding */ apiClient)\n/* harmony export */ });\nclass ChatGPTAPIClient {\n    constructor() {\n        this.baseUrl = 'https://chatgpt.com';\n        this.isAuthenticated = false;\n        this.checkAuthentication();\n    }\n    async checkAuthentication() {\n        try {\n            const response = await fetch(`${this.baseUrl}/api/auth/session`);\n            this.isAuthenticated = response.ok;\n        }\n        catch (error) {\n            console.warn('Failed to check authentication:', error);\n            this.isAuthenticated = false;\n        }\n    }\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const defaultOptions = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers,\n            },\n            credentials: 'include',\n            ...options,\n        };\n        try {\n            const response = await fetch(url, defaultOptions);\n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n            }\n            return await response.json();\n        }\n        catch (error) {\n            console.error(`API request failed for ${endpoint}:`, error);\n            throw error;\n        }\n    }\n    async getConversations() {\n        try {\n            const data = await this.makeRequest('/api/conversations');\n            return data.items.map(this.mapConversationFromAPI);\n        }\n        catch (error) {\n            console.error('Failed to fetch conversations:', error);\n            return [];\n        }\n    }\n    async getConversation(id) {\n        const data = await this.makeRequest(`/api/conversations/${id}`);\n        return this.mapConversationFromAPI(data);\n    }\n    async createConversation(title) {\n        const data = await this.makeRequest('/api/conversations', {\n            method: 'POST',\n            body: JSON.stringify({ title }),\n        });\n        return this.mapConversationFromAPI(data);\n    }\n    async updateConversation(id, updates) {\n        const data = await this.makeRequest(`/api/conversations/${id}`, {\n            method: 'PATCH',\n            body: JSON.stringify(updates),\n        });\n        return this.mapConversationFromAPI(data);\n    }\n    async deleteConversation(id) {\n        await this.makeRequest(`/api/conversations/${id}`, {\n            method: 'DELETE',\n        });\n    }\n    async getFolders() {\n        try {\n            const data = await this.makeRequest('/api/folders');\n            return data.items.map(this.mapFolderFromAPI);\n        }\n        catch (error) {\n            console.error('Failed to fetch folders:', error);\n            return [];\n        }\n    }\n    async createFolder(name, color) {\n        const data = await this.makeRequest('/api/folders', {\n            method: 'POST',\n            body: JSON.stringify({ name, color }),\n        });\n        return this.mapFolderFromAPI(data);\n    }\n    async updateFolder(id, updates) {\n        const data = await this.makeRequest(`/api/folders/${id}`, {\n            method: 'PATCH',\n            body: JSON.stringify(updates),\n        });\n        return this.mapFolderFromAPI(data);\n    }\n    async deleteFolder(id) {\n        await this.makeRequest(`/api/folders/${id}`, {\n            method: 'DELETE',\n        });\n    }\n    async getPrompts() {\n        try {\n            const data = await this.makeRequest('/api/prompts');\n            return data.items.map(this.mapPromptFromAPI);\n        }\n        catch (error) {\n            console.error('Failed to fetch prompts:', error);\n            return [];\n        }\n    }\n    async createPrompt(prompt) {\n        const data = await this.makeRequest('/api/prompts', {\n            method: 'POST',\n            body: JSON.stringify(prompt),\n        });\n        return this.mapPromptFromAPI(data);\n    }\n    async updatePrompt(id, updates) {\n        const data = await this.makeRequest(`/api/prompts/${id}`, {\n            method: 'PATCH',\n            body: JSON.stringify(updates),\n        });\n        return this.mapPromptFromAPI(data);\n    }\n    async deletePrompt(id) {\n        await this.makeRequest(`/api/prompts/${id}`, {\n            method: 'DELETE',\n        });\n    }\n    mapConversationFromAPI(data) {\n        return {\n            id: data.id,\n            title: data.title || 'Untitled',\n            messages: data.messages?.map(this.mapMessageFromAPI) || [],\n            createdAt: new Date(data.created_at || Date.now()),\n            updatedAt: new Date(data.updated_at || Date.now()),\n            folderId: data.folder_id,\n            isPinned: data.is_pinned || false,\n            tags: data.tags || [],\n        };\n    }\n    mapMessageFromAPI(data) {\n        return {\n            id: data.id,\n            role: data.role,\n            content: data.content,\n            timestamp: new Date(data.timestamp || Date.now()),\n            model: data.model,\n        };\n    }\n    mapFolderFromAPI(data) {\n        return {\n            id: data.id,\n            name: data.name,\n            color: data.color,\n            conversationIds: data.conversation_ids || [],\n            createdAt: new Date(data.created_at || Date.now()),\n        };\n    }\n    mapPromptFromAPI(data) {\n        return {\n            id: data.id,\n            title: data.title,\n            content: data.content,\n            category: data.category || 'general',\n            tags: data.tags || [],\n            isFavorite: data.is_favorite || false,\n            usageCount: data.usage_count || 0,\n            createdAt: new Date(data.created_at || Date.now()),\n            updatedAt: new Date(data.updated_at || Date.now()),\n        };\n    }\n}\nconst apiClient = new ChatGPTAPIClient();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/api/index.ts\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"background": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkishka_extension"] = self["webpackChunkishka_extension"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["shared"], () => (__webpack_require__("./src/background/index.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;