function testCriticalProperties(){console.log("🧪 TEST 1: Checking critical property initialization");const e={};return["isResetChatHistory","isPremium","userSettings","extensionData"].forEach(o=>{try{const t=o in window,s=window[o];e[o]={exists:t,value:s,type:typeof s},console.log(`✅ ${o}: exists=${t}, value=${s}, type=${typeof s}`)}catch(t){e[o]={exists:!1,error:t.message},console.error(`❌ ${o}: Error - ${t.message}`)}}),e}function testStoreObject(){console.log("🧪 TEST 2: Checking store object functionality");try{const e="store"in window;if(console.log(`Store exists: ${e}`),e){const e=window.store;if(console.log("Store object:",e),"function"==typeof e.get){const o=e.get("isResetChatHistory");console.log(`✅ store.get('isResetChatHistory'): ${o}`)}else console.log("⚠️ store.get method not found");"function"==typeof e.set?(e.set("testKey","testValue"),console.log("✅ store.set test completed")):console.log("⚠️ store.set method not found");const o=e.isResetChatHistory;console.log(`✅ store.isResetChatHistory: ${o}`)}else console.error("❌ Store object not found")}catch(e){console.error("❌ Store object test failed:",e)}}function testSafePropertyFunctions(){console.log("🧪 TEST 3: Testing safe property checking functions");try{if("function"==typeof window.safePropertyCheck){const e=window.safePropertyCheck(window,"isResetChatHistory");console.log(`✅ safePropertyCheck(window, 'isResetChatHistory'): ${e}`);const o=window.safePropertyCheck(null,"isResetChatHistory");console.log(`✅ safePropertyCheck(null, 'isResetChatHistory'): ${o}`);const t=window.safePropertyCheck(void 0,"isResetChatHistory");console.log(`✅ safePropertyCheck(undefined, 'isResetChatHistory'): ${t}`)}else console.log("⚠️ safePropertyCheck function not found");if("function"==typeof window.safeInOperator){const e=window.safeInOperator("isResetChatHistory",window);console.log(`✅ safeInOperator('isResetChatHistory', window): ${e}`);const o=window.safeInOperator("isResetChatHistory",null);console.log(`✅ safeInOperator('isResetChatHistory', null): ${o}`);const t=window.safeInOperator("isResetChatHistory",void 0);console.log(`✅ safeInOperator('isResetChatHistory', undefined): ${t}`)}else console.log("⚠️ safeInOperator function not found")}catch(e){console.error("❌ Safe property functions test failed:",e)}}function testChromeStorageWrapper(){console.log("🧪 TEST 4: Testing Chrome storage wrapper");try{"undefined"!=typeof chrome&&chrome.storage?(console.log("✅ Chrome storage API available"),"function"==typeof window.safeStorageGet?window.safeStorageGet("isResetChatHistory",!1).then(e=>{console.log(`✅ safeStorageGet('isResetChatHistory'): ${e}`)}).catch(e=>{console.error("❌ safeStorageGet failed:",e)}):console.log("⚠️ safeStorageGet function not found"),"function"==typeof window.safeStorageSet?window.safeStorageSet("testDebugKey","testDebugValue").then(e=>{console.log(`✅ safeStorageSet test: ${e}`)}).catch(e=>{console.error("❌ safeStorageSet failed:",e)}):console.log("⚠️ safeStorageSet function not found")):console.log("⚠️ Chrome storage API not available")}catch(e){console.error("❌ Chrome storage wrapper test failed:",e)}}function testProblematicPropertyAccess(){console.log("🧪 TEST 5: Simulating problematic property access");try{const e=window.isResetChatHistory;console.log(`✅ Direct access - window.isResetChatHistory: ${e}`);const o="isResetChatHistory"in window;console.log(`✅ 'in' operator - 'isResetChatHistory' in window: ${o}`);const t=window.hasOwnProperty("isResetChatHistory");console.log(`✅ hasOwnProperty - window.hasOwnProperty('isResetChatHistory'): ${t}`);const s=Object.getOwnPropertyDescriptor(window,"isResetChatHistory");console.log("✅ Object.getOwnPropertyDescriptor: "+(s?"Found":"Not found"));try{const{isResetChatHistory:e}=window;console.log(`✅ Destructuring - isResetChatHistory: ${e}`)}catch(e){console.error("❌ Destructuring failed:",e)}try{const e=void 0,o=!!window.safeInOperator&&window.safeInOperator("isResetChatHistory",e);console.log(`✅ Safe access on undefined object: ${o}`)}catch(e){console.error("❌ Safe access on undefined object failed:",e)}}catch(e){console.error("❌ Problematic property access test failed:",e)}}function runDebugTests(){console.log("🚀 DEBUG TEST: Running all verification tests");const e={criticalProperties:testCriticalProperties(),storeObject:testStoreObject(),safeFunctions:testSafePropertyFunctions(),chromeStorage:testChromeStorageWrapper(),problematicAccess:testProblematicPropertyAccess()};console.log("📊 DEBUG TEST: All tests completed"),console.log("📋 DEBUG TEST: Results summary:",e);let o=0,t=0;return Object.keys(e.criticalProperties).forEach(s=>{o++,e.criticalProperties[s].exists&&!e.criticalProperties[s].error&&t++}),console.log(`📈 DEBUG TEST: ${t}/${o} critical property tests passed`),t===o?console.log("🎉 DEBUG TEST: All tests PASSED! The fix appears to be working correctly."):console.log("⚠️ DEBUG TEST: Some tests failed. The fix may need additional work."),e}console.log("🔬 DEBUG TEST: Starting comprehensive fix verification"),setTimeout(()=>{runDebugTests()},1e3),console.log("🔬 DEBUG TEST: Test script loaded and scheduled");