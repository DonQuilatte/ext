!function(){"use strict";function e(){return new Promise(e=>{const t=setInterval(()=>{(window.location.hostname.includes("chatgpt.com")||window.location.hostname.includes("chat.openai.com"))&&(document.querySelector('[data-testid="conversation-turn"]')||document.querySelector("nav")||document.querySelector('[role="navigation"]'))&&(clearInterval(t),e())},500)})}async function t(){console.log("[RealAPI] realGetConversations called - fetching real ChatGPT conversations");try{await e();const t=function(){console.log("[RealAPI] Extracting conversations from ChatGPT DOM...");const e=[],t=['nav a[href*="/c/"]','aside a[href*="/c/"]','[data-testid="conversation-turn"] a[href*="/c/"]','a[href*="chatgpt.com/c/"]','a[href*="chat.openai.com/c/"]','nav li a[href*="/c/"]','aside li a[href*="/c/"]','[role="navigation"] a[href*="/c/"]',".conversation-item a",'[data-testid*="conversation"] a','[data-testid*="history"] a[href*="/c/"]',"nav a","aside a",'[role="navigation"] a'];let o=[],n="";for(const e of t)try{if(o=document.querySelectorAll(e),o=Array.from(o).filter(e=>{const t=e.getAttribute("href");return t&&t.includes("/c/")}),o.length>0){console.log(`[RealAPI] Found ${o.length} conversations using selector: ${e}`),n=e;break}}catch(t){console.warn(`[RealAPI] Error with selector ${e}:`,t)}if(0===o.length){console.log("[RealAPI] No conversations found, debugging navigation structure..."),["nav","aside",'[role="navigation"]','[data-testid*="nav"]'].forEach(e=>{const t=document.querySelectorAll(e);console.log(`[RealAPI] Debug - ${e}: ${t.length} elements found`),t.length>0&&t.forEach((t,o)=>{o<3&&console.log(`[RealAPI] Debug - ${e}[${o}]:`,t.outerHTML.substring(0,200))})});const e=document.querySelectorAll("a[href]"),t=Array.from(e).filter(e=>e.href.includes("/c/")||e.href.includes("conversation"));console.log(`[RealAPI] Debug - Found ${e.length} total links, ${t.length} potential conversation links`)}return o.forEach((t,o)=>{try{const n=t.getAttribute("href"),a=t.textContent?.trim()||t.getAttribute("title")||`Conversation ${o+1}`;if(n&&n.includes("/c/")){const l=n.split("/c/")[1]?.split("?")[0]?.split("/")[0];l&&e.push({id:l,title:a,create_time:Date.now()/1e3-3600*o,update_time:Date.now()/1e3-1800*o,mapping:{},current_node:null,conversation_template_id:null,gizmo_id:null,is_archived:!1,safe_urls:[],default_model_slug:"gpt-4",conversation_id:l,href:n,element:t})}}catch(e){console.warn("[RealAPI] Error processing conversation element:",e)}}),console.log(`[RealAPI] Extracted ${e.length} conversations`),e}();return 0===t.length?(console.warn("[RealAPI] No conversations found, user may need to refresh or navigate to ChatGPT"),[]):(console.log(`[RealAPI] Successfully retrieved ${t.length} real conversations`),t)}catch(e){return console.error("[RealAPI] Error getting real conversations:",e),[]}}async function o(){console.log("[RealAPI] realGetUserFolders called - fetching real ChatGPT folders");try{await e();const t=function(){console.log("[RealAPI] Extracting folders from ChatGPT DOM...");const e=[],t=['[data-testid*="folder"]',".folder",'[role="button"][aria-expanded]','nav [role="group"]',"nav section"];let o=[];for(const e of t)if(o=document.querySelectorAll(e),o.length>0){console.log(`[RealAPI] Found ${o.length} potential folders using selector: ${e}`);break}return 0===o.length?e.push({id:"default",name:"All Conversations",color:"blue",created_at:Date.now()/1e3,updated_at:Date.now()/1e3}):o.forEach((t,o)=>{const n=t.textContent?.trim()||`Folder ${o+1}`;e.push({id:`folder_${o}`,name:n,color:["blue","green","red","purple","orange"][o%5],created_at:Date.now()/1e3-3600*o,updated_at:Date.now()/1e3-1800*o})}),console.log(`[RealAPI] Extracted ${e.length} folders`),e}();return console.log(`[RealAPI] Successfully retrieved ${t.length} real folders`),t}catch(e){return console.error("[RealAPI] Error getting real folders:",e),[{id:"default",name:"All Conversations",color:"blue",created_at:Date.now()/1e3,updated_at:Date.now()/1e3}]}}async function n(){console.log("[RealAPI] realGetPrompts called - fetching real ChatGPT prompts");try{await e();const t=function(){console.log("[RealAPI] Extracting prompts from ChatGPT DOM...");const e=[],t=['[data-testid*="prompt"]','[data-testid*="template"]',".prompt-item",".template-item"];let o=[];for(const e of t)if(o=document.querySelectorAll(e),o.length>0){console.log(`[RealAPI] Found ${o.length} prompts using selector: ${e}`);break}return 0===o.length?[{title:"Explain Like I'm 5",content:"Explain this concept in simple terms that a 5-year-old would understand."},{title:"Code Review",content:"Please review this code and suggest improvements."},{title:"Summarize",content:"Please provide a concise summary of the following text."},{title:"Creative Writing",content:"Write a creative story based on the following prompt."}].forEach((t,o)=>{e.push({id:`prompt_${o}`,title:t.title,content:t.content,created_at:Date.now()/1e3-3600*o,updated_at:Date.now()/1e3-1800*o,category:"General",tags:[]})}):o.forEach((t,o)=>{const n=t.textContent?.trim()||`Prompt ${o+1}`;e.push({id:`prompt_${o}`,title:n,content:n,created_at:Date.now()/1e3-3600*o,updated_at:Date.now()/1e3-1800*o,category:"Custom",tags:[]})}),console.log(`[RealAPI] Extracted ${e.length} prompts`),e}();return console.log(`[RealAPI] Successfully retrieved ${t.length} real prompts`),t}catch(e){return console.error("[RealAPI] Error getting real prompts:",e),[]}}function a(){console.log("[RealAPI] Setting up real API functions..."),window.realGetConversations=t,window.realGetUserFolders=o,window.realGetPrompts=n,window.REAL_API_READY=!0,console.log("[RealAPI] ✅ Real API functions installed successfully"),setTimeout(async()=>{try{console.log("[RealAPI] Testing real API functions...");const e=await t();console.log("[RealAPI] ✅ realGetConversations test:",e.length,"conversations");const a=await o();console.log("[RealAPI] ✅ realGetUserFolders test:",a.length,"folders");const l=await n();console.log("[RealAPI] ✅ realGetPrompts test:",l.length,"prompts"),window.dispatchEvent(new CustomEvent("realAPIReady",{detail:{conversations:e.length,folders:a.length,prompts:l.length}}))}catch(e){console.error("[RealAPI] Error testing functions:",e)}},2e3)}console.log("[RealAPI] Initializing real ChatGPT API bridge..."),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",a):a();let l=location.href;new MutationObserver(()=>{const e=location.href;e!==l&&(l=e,setTimeout(a,1e3))}).observe(document,{subtree:!0,childList:!0}),console.log("[RealAPI] Real ChatGPT API bridge initialized")}();