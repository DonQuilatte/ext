!function(){"use strict";console.log("🧪 [E2E-TEST] Starting End-to-End Test Suite..."),console.log("🧪 [E2E-TEST] ==========================================");let e={passed:0,failed:0,warnings:0,details:[]};function n(n,o,t,s=!1){const a=o?"✅":s?"⚠️":"❌",i=o?"PASS":s?"WARN":"FAIL";console.log(`🧪 [E2E-TEST] ${a} ${n}: ${i} - ${t}`),e.details.push({test:n,status:i,message:t}),o?e.passed++:s?e.warnings++:e.failed++}function o(){console.log("🧪 [E2E-TEST] =========================================="),console.log("🧪 [E2E-TEST] STARTING COMPREHENSIVE END-TO-END TESTS"),console.log("🧪 [E2E-TEST] =========================================="),function(){console.log("🧪 [E2E-TEST] Testing Extension Loading...");try{"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.id?n("Extension Context",!0,"Extension context is valid and accessible"):n("Extension Context",!1,"Extension context is invalid or missing"),void 0!==window.ultraAggressiveFixLoaded?n("Ultra-Aggressive Fix",!0,"Ultra-aggressive fix is loaded and active"):n("Ultra-Aggressive Fix",!1,"Ultra-aggressive fix not detected",!0)}catch(e){n("Extension Loading",!1,`Error during extension loading test: ${e.message}`)}}(),function(){console.log("🧪 [E2E-TEST] Testing Error Suppression...");try{try{chrome.storage.local.get(["test"],function(e){chrome.runtime.lastError?n("Chrome Storage Error Handling",!0,"Chrome storage error handled gracefully"):n("Chrome Storage Access",!0,"Chrome storage accessible without errors")})}catch(e){n("Chrome Storage Fallback",!0,"Chrome storage error caught and handled")}try{fetch("https://api.infi-dev.com/test-blocked").then(()=>{n("CORS Blocking",!1,"Fetch request was not blocked (unexpected)")}).catch(()=>{n("CORS Blocking",!0,"Fetch request blocked as expected")})}catch(e){n("CORS Blocking",!0,"Fetch request blocked immediately")}}catch(e){n("Error Suppression",!1,`Error during suppression test: ${e.message}`)}}(),console.log("🧪 [E2E-TEST] Testing Premium Features..."),[{name:"Manage Chats",selector:'[data-testid="manage-chats"], .manage-chats, #manageChats'},{name:"Manage Folders",selector:'[data-testid="manage-folders"], .manage-folders, #manageFolders'},{name:"Manage Prompts",selector:'[data-testid="manage-prompts"], .manage-prompts, #managePrompts'}].forEach(e=>{try{const o=document.querySelectorAll(e.selector);o.length>0?(n(`${e.name} UI`,!0,`${e.name} elements found in DOM (${o.length} elements)`),o.forEach((o,t)=>{"none"===o.style.display||o.disabled?n(`${e.name} Clickable ${t+1}`,!1,"Element is hidden or disabled",!0):n(`${e.name} Clickable ${t+1}`,!0,"Element is visible and clickable")})):n(`${e.name} UI`,!1,`${e.name} elements not found in DOM`,!0);const t=e.name.toLowerCase().replace(/\s+/g,"");"function"==typeof window[t]?n(`${e.name} Function`,!0,`${t} function is available`):n(`${e.name} Function`,!1,`${t} function not found`,!0)}catch(o){n(`${e.name}`,!1,`Error testing ${e.name}: ${o.message}`)}}),function(){console.log("🧪 [E2E-TEST] Testing Plan Display...");try{let e=!1;[".plan-display","[data-plan]",".premium-badge",".toolbox-plan","#planDisplay"].forEach(o=>{const t=document.querySelectorAll(o);t.length>0&&(e=!0,t.forEach((e,o)=>{const t=e.textContent||e.innerText||"";t.includes("Premium")||t.includes("Toolbox Plan")?n(`Plan Display ${o+1}`,!0,`Plan display shows: "${t.trim()}"`):n(`Plan Display ${o+1}`,!1,`Plan display text unclear: "${t.trim()}"`,!0)}))}),e||n("Plan Display",!1,"No plan display elements found",!0)}catch(e){n("Plan Display",!1,`Error testing plan display: ${e.message}`)}}(),function(){console.log("🧪 [E2E-TEST] Testing Real API Bridge...");try{void 0!==window.realAPIBridge?(n("Real API Bridge",!0,"Real API bridge is loaded"),["getConversations","getFolders","getPrompts"].forEach(e=>{"function"==typeof window.realAPIBridge[e]?n(`API Bridge ${e}`,!0,`${e} function available`):n(`API Bridge ${e}`,!1,`${e} function missing`,!0)})):n("Real API Bridge",!1,"Real API bridge not found",!0)}catch(e){n("Real API Bridge",!1,`Error testing real API bridge: ${e.message}`)}}(),function(){console.log("🧪 [E2E-TEST] Testing Console Error Suppression...");const e=console.error;let o=0,t=[];console.error=function(...n){o++;const s=n.join(" ");["Extension context invalidated","CORS policy","api.infi-dev.com","auth.openai.com","Mock backend not found"].some(e=>s.includes(e))?t.push(s):e.apply(console,n)},setTimeout(()=>{console.error=e,t.length>0?n("Error Suppression",!0,`${t.length} known errors suppressed`):n("Error Suppression",!0,"No known errors detected"),o-t.length===0?n("Unknown Errors",!0,"No unknown errors detected"):n("Unknown Errors",!1,o-t.length+" unknown errors detected")},2e3)}(),function(){console.log("🧪 [E2E-TEST] Testing Extension Branding...");try{if(chrome.runtime&&chrome.runtime.getManifest){const e=chrome.runtime.getManifest();"Ishka"===e.name?n("Extension Name",!0,'Extension name is correctly set to "Ishka"'):n("Extension Name",!1,`Extension name is "${e.name}", expected "Ishka"`),e.icons&&e.icons[48]&&e.icons[48].includes("yellow")?n("Extension Icon",!0,"Yellow circle icons are configured"):n("Extension Icon",!1,"Yellow circle icons not detected",!0)}else n("Extension Branding",!1,"Cannot access extension manifest",!0)}catch(e){n("Extension Branding",!1,`Error testing branding: ${e.message}`)}}(),function(){console.log("🧪 [E2E-TEST] Testing Mock Backend...");try{void 0!==window.mockBackend?(n("Mock Backend",!0,"Mock backend is available"),["getConversations","getFolders","getPrompts"].forEach(e=>{"function"==typeof window.mockBackend[e]?n(`Mock ${e}`,!0,`Mock ${e} function available`):n(`Mock ${e}`,!1,`Mock ${e} function missing`,!0)})):n("Mock Backend",!1,"Mock backend not found",!0)}catch(e){n("Mock Backend",!1,`Error testing mock backend: ${e.message}`)}}(),setTimeout(()=>{console.log("🧪 [E2E-TEST] =========================================="),console.log("🧪 [E2E-TEST] END-TO-END TEST RESULTS SUMMARY"),console.log("🧪 [E2E-TEST] =========================================="),console.log(`🧪 [E2E-TEST] ✅ PASSED: ${e.passed}`),console.log(`🧪 [E2E-TEST] ❌ FAILED: ${e.failed}`),console.log(`🧪 [E2E-TEST] ⚠️  WARNINGS: ${e.warnings}`),console.log(`🧪 [E2E-TEST] 📊 TOTAL TESTS: ${e.passed+e.failed+e.warnings}`);const n=Math.round(e.passed/(e.passed+e.failed+e.warnings)*100);console.log(`🧪 [E2E-TEST] 📈 SUCCESS RATE: ${n}%`),0===e.failed?(console.log("🧪 [E2E-TEST] =========================================="),console.log("🧪 [E2E-TEST] 🎉 ALL CRITICAL TESTS PASSED!"),console.log("🧪 [E2E-TEST] Extension is functioning correctly"),console.log("🧪 [E2E-TEST] ==========================================")):(console.log("🧪 [E2E-TEST] =========================================="),console.log("🧪 [E2E-TEST] ⚠️  SOME TESTS FAILED - REVIEW NEEDED"),console.log("🧪 [E2E-TEST] Check individual test results above"),console.log("🧪 [E2E-TEST] ==========================================")),window.e2eTestResults=e},5e3)}o(),"loading"===document.readyState&&document.addEventListener("DOMContentLoaded",o)}();