(()=>{"use strict";var e,t={596:(e,t,a)=>{var o=a(582);const r=new class{constructor(){this.baseUrl="https://chatgpt.com",this.isAuthenticated=!1,this.checkAuthentication()}async checkAuthentication(){try{const e=await fetch(`${this.baseUrl}/api/auth/session`);this.isAuthenticated=e.ok}catch(e){console.warn("Failed to check authentication:",e),this.isAuthenticated=!1}}async makeRequest(e,t={}){const a=`${this.baseUrl}${e}`,o={headers:{"Content-Type":"application/json",...t.headers},credentials:"include",...t};try{const e=await fetch(a,o);if(!e.ok)throw new Error(`API request failed: ${e.status} ${e.statusText}`);return await e.json()}catch(t){throw console.error(`API request failed for ${e}:`,t),t}}async getConversations(){try{return(await this.makeRequest("/api/conversations")).items.map(this.mapConversationFromAPI)}catch(e){return console.error("Failed to fetch conversations:",e),[]}}async getConversation(e){const t=await this.makeRequest(`/api/conversations/${e}`);return this.mapConversationFromAPI(t)}async createConversation(e){const t=await this.makeRequest("/api/conversations",{method:"POST",body:JSON.stringify({title:e})});return this.mapConversationFromAPI(t)}async updateConversation(e,t){const a=await this.makeRequest(`/api/conversations/${e}`,{method:"PATCH",body:JSON.stringify(t)});return this.mapConversationFromAPI(a)}async deleteConversation(e){await this.makeRequest(`/api/conversations/${e}`,{method:"DELETE"})}async getFolders(){try{return(await this.makeRequest("/api/folders")).items.map(this.mapFolderFromAPI)}catch(e){return console.error("Failed to fetch folders:",e),[]}}async createFolder(e,t){const a=await this.makeRequest("/api/folders",{method:"POST",body:JSON.stringify({name:e,color:t})});return this.mapFolderFromAPI(a)}async updateFolder(e,t){const a=await this.makeRequest(`/api/folders/${e}`,{method:"PATCH",body:JSON.stringify(t)});return this.mapFolderFromAPI(a)}async deleteFolder(e){await this.makeRequest(`/api/folders/${e}`,{method:"DELETE"})}async getPrompts(){try{return(await this.makeRequest("/api/prompts")).items.map(this.mapPromptFromAPI)}catch(e){return console.error("Failed to fetch prompts:",e),[]}}async createPrompt(e){const t=await this.makeRequest("/api/prompts",{method:"POST",body:JSON.stringify(e)});return this.mapPromptFromAPI(t)}async updatePrompt(e,t){const a=await this.makeRequest(`/api/prompts/${e}`,{method:"PATCH",body:JSON.stringify(t)});return this.mapPromptFromAPI(a)}async deletePrompt(e){await this.makeRequest(`/api/prompts/${e}`,{method:"DELETE"})}mapConversationFromAPI(e){return{id:e.id,title:e.title||"Untitled",messages:e.messages?.map(this.mapMessageFromAPI)||[],createdAt:new Date(e.created_at||Date.now()),updatedAt:new Date(e.updated_at||Date.now()),folderId:e.folder_id,isPinned:e.is_pinned||!1,tags:e.tags||[]}}mapMessageFromAPI(e){return{id:e.id,role:e.role,content:e.content,timestamp:new Date(e.timestamp||Date.now()),model:e.model}}mapFolderFromAPI(e){return{id:e.id,name:e.name,color:e.color,conversationIds:e.conversation_ids||[],createdAt:new Date(e.created_at||Date.now())}}mapPromptFromAPI(e){return{id:e.id,title:e.title,content:e.content,category:e.category||"general",tags:e.tags||[],isFavorite:e.is_favorite||!1,usageCount:e.usage_count||0,createdAt:new Date(e.created_at||Date.now()),updatedAt:new Date(e.updated_at||Date.now())}}};var s=a(678);console.log("🚀 Ishka Extension Background Script Initialized"),chrome.runtime.onInstalled.addListener(async e=>{console.log("Extension installed/updated:",e.reason),"install"===e.reason&&(await o.nl.resetState(),console.log("✅ Initial state set up")),"update"===e.reason&&(console.log("🔄 Extension updated, checking for data migration..."),await async function(){try{const e=chrome.runtime.getManifest().version,t=await s.vg.get("extension_version");t!==e&&(console.log(`🔄 Migrating from ${t} to ${e}`),await s.vg.set("extension_version",e),console.log("✅ Migration completed"))}catch(e){console.error("❌ Migration failed:",e)}}())}),chrome.runtime.onStartup.addListener(async()=>{console.log("🔄 Extension starting up..."),await async function(){try{const e=await r.getConversations(),t=await r.getFolders();await r.getPrompts(),await o.nl.setState({conversations:{conversations:e,folders:t,isLoading:!1}}),console.log("✅ Extension initialized successfully")}catch(e){console.error("❌ Failed to initialize extension:",e)}}()}),chrome.runtime.onMessage.addListener((e,t,a)=>(console.log("📨 Received message:",e),async function(e){const{type:t,payload:a}=e;switch(t){case"GET_STATE":return{state:o.nl.getState()};case"SET_STATE":return await o.nl.setState(a),{success:!0};case"API_REQUEST":return await async function(e){const{method:t,endpoint:a,data:o}=e;try{switch(t){case"GET_CONVERSATIONS":return await r.getConversations();case"GET_CONVERSATION":return await r.getConversation(o.id);case"CREATE_CONVERSATION":return await r.createConversation(o.title);case"UPDATE_CONVERSATION":return await r.updateConversation(o.id,o.updates);case"DELETE_CONVERSATION":return await r.deleteConversation(o.id),{success:!0};case"GET_FOLDERS":return await r.getFolders();case"CREATE_FOLDER":return await r.createFolder(o.name,o.color);case"UPDATE_FOLDER":return await r.updateFolder(o.id,o.updates);case"DELETE_FOLDER":return await r.deleteFolder(o.id),{success:!0};case"GET_PROMPTS":return await r.getPrompts();case"CREATE_PROMPT":return await r.createPrompt(o.prompt);case"UPDATE_PROMPT":return await r.updatePrompt(o.id,o.updates);case"DELETE_PROMPT":return await r.deletePrompt(o.id),{success:!0};default:throw new Error(`Unknown API method: ${t}`)}}catch(e){throw console.error("API request failed:",e),e}}(a);case"GET_STORAGE":return await s.vg.get(a.key);case"SET_STORAGE":return await s.vg.set(a.key,a.value),{success:!0};case"CLEAR_STORAGE":return await s.vg.clear(),{success:!0};case"GET_EXTENSION_INFO":return{version:chrome.runtime.getManifest().version,name:chrome.runtime.getManifest().name,id:chrome.runtime.id};default:throw new Error(`Unknown message type: ${t}`)}}(e).then(a).catch(e=>{console.error("❌ Error handling message:",e),a({error:e.message})}),!0)),chrome.tabs.onUpdated.addListener((e,t,a)=>{"complete"===t.status&&a.url?.includes("chatgpt.com")&&(console.log("📄 ChatGPT page loaded, injecting content script"),async function(e){try{await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),console.log("✅ Content script injected")}catch(e){console.error("❌ Failed to inject content script:",e)}}(e))}),chrome.storage.onChanged.addListener((e,t)=>{console.log("💾 Storage changed:",e,t),Object.entries(e).forEach(([e,t])=>{void 0!==t.newValue&&o.nl.setState({[e]:t.newValue})})}),setInterval(async()=>{try{if(o.nl.getState().user.preferences.autoSave){const e=await r.getConversations();await o.nl.updateConversations({conversations:e})}}catch(e){console.error("❌ Periodic task failed:",e)}},3e4),console.log("✅ Background script setup complete")}},a={};function o(e){var r=a[e];if(void 0!==r)return r.exports;var s=a[e]={exports:{}};return t[e](s,s.exports,o),s.exports}o.m=t,e=[],o.O=(t,a,r,s)=>{if(!a){var n=1/0;for(l=0;l<e.length;l++){for(var[a,r,s]=e[l],i=!0,c=0;c<a.length;c++)(!1&s||n>=s)&&Object.keys(o.O).every(e=>o.O[e](a[c]))?a.splice(c--,1):(i=!1,s<n&&(n=s));if(i){e.splice(l--,1);var d=r();void 0!==d&&(t=d)}}return t}s=s||0;for(var l=e.length;l>0&&e[l-1][2]>s;l--)e[l]=e[l-1];e[l]=[a,r,s]},o.d=(e,t)=>{for(var a in t)o.o(t,a)&&!o.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={471:0};o.O.j=t=>0===e[t];var t=(t,a)=>{var r,s,[n,i,c]=a,d=0;if(n.some(t=>0!==e[t])){for(r in i)o.o(i,r)&&(o.m[r]=i[r]);if(c)var l=c(o)}for(t&&t(a);d<n.length;d++)s=n[d],o.o(e,s)&&e[s]&&e[s][0](),e[s]=0;return o.O(l)},a=self.webpackChunkishka_extension=self.webpackChunkishka_extension||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var r=o.O(void 0,[804],()=>o(596));r=o.O(r)})();
//# sourceMappingURL=background.js.map