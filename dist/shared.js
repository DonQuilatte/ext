"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkishka_extension"] = self["webpackChunkishka_extension"] || []).push([["shared"],{

/***/ "./src/shared/state/index.ts":
/*!***********************************!*\
  !*** ./src/shared/state/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateManager: () => (/* binding */ StateManager),\n/* harmony export */   getState: () => (/* binding */ getState),\n/* harmony export */   setState: () => (/* binding */ setState),\n/* harmony export */   stateManager: () => (/* binding */ stateManager),\n/* harmony export */   subscribe: () => (/* binding */ subscribe)\n/* harmony export */ });\nclass StateManager {\n    constructor(initialState) {\n        this.state = initialState;\n        this.listeners = new Map();\n        this.storage = typeof chrome !== 'undefined' && chrome.storage ? chrome.storage.local : null;\n        this.initializeStorage();\n    }\n    async initializeStorage() {\n        if (!this.storage) {\n            console.warn('Chrome storage API not available');\n            return;\n        }\n        try {\n            const stored = await this.storage.get(null);\n            if (stored && Object.keys(stored).length > 0) {\n                this.state = { ...this.state, ...stored };\n            }\n        }\n        catch (error) {\n            console.warn('Failed to load state from storage:', error);\n        }\n    }\n    getState() {\n        return { ...this.state };\n    }\n    async setState(partial) {\n        const previousState = { ...this.state };\n        this.state = this.mergeState(this.state, partial);\n        if (this.storage) {\n            try {\n                await this.storage.set(partial);\n            }\n            catch (error) {\n                console.error('Failed to save state to storage:', error);\n            }\n        }\n        this.notifyListeners(previousState, this.state);\n    }\n    mergeState(current, partial) {\n        const merged = { ...current };\n        for (const [key, value] of Object.entries(partial)) {\n            if (value !== undefined) {\n                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n                    merged[key] = this.mergeState(current[key], value);\n                }\n                else {\n                    merged[key] = value;\n                }\n            }\n        }\n        return merged;\n    }\n    subscribe(key, callback) {\n        if (!this.listeners.has(key)) {\n            this.listeners.set(key, new Set());\n        }\n        this.listeners.get(key).add(callback);\n        return () => {\n            const keyListeners = this.listeners.get(key);\n            if (keyListeners) {\n                keyListeners.delete(callback);\n                if (keyListeners.size === 0) {\n                    this.listeners.delete(key);\n                }\n            }\n        };\n    }\n    notifyListeners(previousState, currentState) {\n        for (const [key, listeners] of this.listeners) {\n            if (this.hasStateChanged(key, previousState, currentState)) {\n                listeners.forEach(callback => {\n                    try {\n                        callback(currentState);\n                    }\n                    catch (error) {\n                        console.error(`Error in state listener for key \"${key}\":`, error);\n                    }\n                });\n            }\n        }\n    }\n    hasStateChanged(key, previous, current) {\n        const previousValue = this.getNestedValue(previous, key);\n        const currentValue = this.getNestedValue(current, key);\n        return JSON.stringify(previousValue) !== JSON.stringify(currentValue);\n    }\n    getNestedValue(obj, path) {\n        return path.split('.').reduce((current, key) => current?.[key], obj);\n    }\n    async updateUser(userUpdates) {\n        await this.setState({ user: userUpdates });\n    }\n    async updateConversations(conversationUpdates) {\n        await this.setState({ conversations: conversationUpdates });\n    }\n    async updateUI(uiUpdates) {\n        await this.setState({ ui: uiUpdates });\n    }\n    async updateSettings(settingsUpdates) {\n        await this.setState({ settings: settingsUpdates });\n    }\n    async resetState() {\n        const initialState = this.getInitialState();\n        await this.setState(initialState);\n    }\n    async clearStorage() {\n        if (this.storage) {\n            try {\n                await this.storage.clear();\n            }\n            catch (error) {\n                console.error('Failed to clear storage:', error);\n            }\n        }\n    }\n    getInitialState() {\n        return {\n            user: {\n                isPremium: false,\n                isLoggedIn: false,\n                preferences: {\n                    theme: 'auto',\n                    language: 'en',\n                    enableNotifications: true,\n                    autoSave: true,\n                },\n            },\n            conversations: {\n                conversations: [],\n                folders: [],\n                searchQuery: '',\n                isLoading: false,\n            },\n            ui: {\n                isModalOpen: false,\n                snackbar: {\n                    isVisible: false,\n                    message: '',\n                    type: 'info',\n                },\n                sidebar: {\n                    isOpen: false,\n                    activeTab: 'conversations',\n                },\n                loading: {\n                    isLoading: false,\n                },\n            },\n            settings: {\n                general: {\n                    autoSaveInterval: 30000,\n                    maxConversations: 100,\n                    enableRTL: false,\n                    enableVoiceDownload: false,\n                },\n                premium: {\n                    isEnabled: false,\n                    features: [],\n                },\n                advanced: {\n                    debugMode: false,\n                    enableLogging: false,\n                },\n            },\n        };\n    }\n}\nconst stateManager = new StateManager({\n    user: {\n        isPremium: false,\n        isLoggedIn: false,\n        preferences: {\n            theme: 'auto',\n            language: 'en',\n            enableNotifications: true,\n            autoSave: true,\n        },\n    },\n    conversations: {\n        conversations: [],\n        folders: [],\n        searchQuery: '',\n        isLoading: false,\n    },\n    ui: {\n        isModalOpen: false,\n        snackbar: {\n            isVisible: false,\n            message: '',\n            type: 'info',\n        },\n        sidebar: {\n            isOpen: false,\n            activeTab: 'conversations',\n        },\n        loading: {\n            isLoading: false,\n        },\n    },\n    settings: {\n        general: {\n            autoSaveInterval: 30000,\n            maxConversations: 100,\n            enableRTL: false,\n            enableVoiceDownload: false,\n        },\n        premium: {\n            isEnabled: false,\n            features: [],\n        },\n        advanced: {\n            debugMode: false,\n            enableLogging: false,\n        },\n    },\n});\nconst getState = () => stateManager.getState();\nconst setState = (partial) => stateManager.setState(partial);\nconst subscribe = (key, callback) => stateManager.subscribe(key, callback);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/state/index.ts\n\n}");

/***/ }),

/***/ "./src/shared/utils/index.ts":
/*!***********************************!*\
  !*** ./src/shared/utils/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dateUtils: () => (/* binding */ dateUtils),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   domUtils: () => (/* binding */ domUtils),\n/* harmony export */   eventUtils: () => (/* binding */ eventUtils),\n/* harmony export */   storageUtils: () => (/* binding */ storageUtils),\n/* harmony export */   stringUtils: () => (/* binding */ stringUtils),\n/* harmony export */   validationUtils: () => (/* binding */ validationUtils)\n/* harmony export */ });\nconst domUtils = {\n    waitForElement(selector, timeout = 10000) {\n        return new Promise((resolve, reject) => {\n            const element = document.querySelector(selector);\n            if (element) {\n                resolve(element);\n                return;\n            }\n            const observer = new MutationObserver(() => {\n                const element = document.querySelector(selector);\n                if (element) {\n                    observer.disconnect();\n                    resolve(element);\n                }\n            });\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n            setTimeout(() => {\n                observer.disconnect();\n                reject(new Error(`Element ${selector} not found within ${timeout}ms`));\n            }, timeout);\n        });\n    },\n    injectScript(src) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = src;\n            script.onload = () => resolve();\n            script.onerror = () => reject(new Error(`Failed to load script: ${src}`));\n            document.head.appendChild(script);\n        });\n    },\n    injectStyle(css) {\n        const style = document.createElement('style');\n        style.textContent = css;\n        document.head.appendChild(style);\n    },\n    removeElements(selector) {\n        document.querySelectorAll(selector).forEach(el => el.remove());\n    },\n    isElementVisible(element) {\n        const style = window.getComputedStyle(element);\n        return style.display !== 'none' && style.visibility !== 'hidden' && element.offsetParent !== null;\n    },\n};\nconst storageUtils = {\n    async get(key) {\n        if (typeof chrome === 'undefined' || !chrome.storage) {\n            return null;\n        }\n        try {\n            const result = await chrome.storage.local.get(key);\n            return result[key] || null;\n        }\n        catch (error) {\n            console.error('Failed to get from storage:', error);\n            return null;\n        }\n    },\n    async set(key, value) {\n        if (typeof chrome === 'undefined' || !chrome.storage) {\n            return;\n        }\n        try {\n            await chrome.storage.local.set({ [key]: value });\n        }\n        catch (error) {\n            console.error('Failed to set in storage:', error);\n        }\n    },\n    async remove(key) {\n        if (typeof chrome === 'undefined' || !chrome.storage) {\n            return;\n        }\n        try {\n            await chrome.storage.local.remove(key);\n        }\n        catch (error) {\n            console.error('Failed to remove from storage:', error);\n        }\n    },\n    async clear() {\n        if (typeof chrome === 'undefined' || !chrome.storage) {\n            return;\n        }\n        try {\n            await chrome.storage.local.clear();\n        }\n        catch (error) {\n            console.error('Failed to clear storage:', error);\n        }\n    },\n};\nconst stringUtils = {\n    generateId() {\n        return Math.random().toString(36).substring(2) + Date.now().toString(36);\n    },\n    truncate(text, maxLength, suffix = '...') {\n        if (text.length <= maxLength)\n            return text;\n        return text.substring(0, maxLength - suffix.length) + suffix;\n    },\n    toTitleCase(text) {\n        return text.replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n    },\n    sanitizeHtml(html) {\n        const div = document.createElement('div');\n        div.textContent = html;\n        return div.innerHTML;\n    },\n};\nconst dateUtils = {\n    formatRelativeTime(date) {\n        const now = new Date();\n        const diff = now.getTime() - date.getTime();\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0)\n            return `${days} day${days > 1 ? 's' : ''} ago`;\n        if (hours > 0)\n            return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        if (minutes > 0)\n            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        return 'Just now';\n    },\n    formatDate(date) {\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n        });\n    },\n};\nconst validationUtils = {\n    isValidUrl(string) {\n        try {\n            new URL(string);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    },\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    },\n    isDefined(value) {\n        return value !== null && value !== undefined;\n    },\n};\nconst eventUtils = {\n    debounce(func, wait) {\n        let timeout;\n        return (...args) => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func(...args), wait);\n        };\n    },\n    throttle(func, limit) {\n        let inThrottle;\n        return (...args) => {\n            if (!inThrottle) {\n                func(...args);\n                inThrottle = true;\n                setTimeout(() => (inThrottle = false), limit);\n            }\n        };\n    },\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    dom: domUtils,\n    storage: storageUtils,\n    string: stringUtils,\n    date: dateUtils,\n    validation: validationUtils,\n    event: eventUtils,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/utils/index.ts\n\n}");

/***/ })

}]);