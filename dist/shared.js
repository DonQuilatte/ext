"use strict";(self.webpackChunkishka_extension=self.webpackChunkishka_extension||[]).push([[804],{582:(e,t,s)=>{s.d(t,{nl:()=>a});const a=new class{constructor(e){this.state=e,this.listeners=new Map,this.storage="undefined"!=typeof chrome&&chrome.storage?chrome.storage.local:null,this.initializeStorage()}async initializeStorage(){if(this.storage)try{const e=await this.storage.get(null);e&&Object.keys(e).length>0&&(this.state={...this.state,...e})}catch(e){console.warn("Failed to load state from storage:",e)}else console.warn("Chrome storage API not available")}getState(){return{...this.state}}async setState(e){const t={...this.state};if(this.state=this.mergeState(this.state,e),this.storage)try{await this.storage.set(e)}catch(e){console.error("Failed to save state to storage:",e)}this.notifyListeners(t,this.state)}mergeState(e,t){const s={...e};for(const[a,o]of Object.entries(t))void 0!==o&&("object"!=typeof o||null===o||Array.isArray(o)?s[a]=o:s[a]=this.mergeState(e[a],o));return s}subscribe(e,t){return this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(t),()=>{const s=this.listeners.get(e);s&&(s.delete(t),0===s.size&&this.listeners.delete(e))}}notifyListeners(e,t){for(const[s,a]of this.listeners)this.hasStateChanged(s,e,t)&&a.forEach(e=>{try{e(t)}catch(e){console.error(`Error in state listener for key "${s}":`,e)}})}hasStateChanged(e,t,s){const a=this.getNestedValue(t,e),o=this.getNestedValue(s,e);return JSON.stringify(a)!==JSON.stringify(o)}getNestedValue(e,t){return t.split(".").reduce((e,t)=>e?.[t],e)}async updateUser(e){await this.setState({user:e})}async updateConversations(e){await this.setState({conversations:e})}async updateUI(e){await this.setState({ui:e})}async updateSettings(e){await this.setState({settings:e})}async resetState(){const e=this.getInitialState();await this.setState(e)}async clearStorage(){if(this.storage)try{await this.storage.clear()}catch(e){console.error("Failed to clear storage:",e)}}getInitialState(){return{user:{isPremium:!1,isLoggedIn:!1,preferences:{theme:"auto",language:"en",enableNotifications:!0,autoSave:!0}},conversations:{conversations:[],folders:[],searchQuery:"",isLoading:!1},ui:{isModalOpen:!1,snackbar:{isVisible:!1,message:"",type:"info"},sidebar:{isOpen:!1,activeTab:"conversations"},loading:{isLoading:!1}},settings:{general:{autoSaveInterval:3e4,maxConversations:100,enableRTL:!1,enableVoiceDownload:!1},premium:{isEnabled:!1,features:[]},advanced:{debugMode:!1,enableLogging:!1}}}}}({user:{isPremium:!1,isLoggedIn:!1,preferences:{theme:"auto",language:"en",enableNotifications:!0,autoSave:!0}},conversations:{conversations:[],folders:[],searchQuery:"",isLoading:!1},ui:{isModalOpen:!1,snackbar:{isVisible:!1,message:"",type:"info"},sidebar:{isOpen:!1,activeTab:"conversations"},loading:{isLoading:!1}},settings:{general:{autoSaveInterval:3e4,maxConversations:100,enableRTL:!1,enableVoiceDownload:!1},premium:{isEnabled:!1,features:[]},advanced:{debugMode:!1,enableLogging:!1}}})},678:(e,t,s)=>{s.d(t,{Si:()=>a,vg:()=>o});const a={waitForElement:(e,t=1e4)=>new Promise((s,a)=>{const o=document.querySelector(e);if(o)return void s(o);const r=new MutationObserver(()=>{const t=document.querySelector(e);t&&(r.disconnect(),s(t))});r.observe(document.body,{childList:!0,subtree:!0}),setTimeout(()=>{r.disconnect(),a(new Error(`Element ${e} not found within ${t}ms`))},t)}),injectScript:e=>new Promise((t,s)=>{const a=document.createElement("script");a.src=e,a.onload=()=>t(),a.onerror=()=>s(new Error(`Failed to load script: ${e}`)),document.head.appendChild(a)}),injectStyle(e){const t=document.createElement("style");t.textContent=e,document.head.appendChild(t)},removeElements(e){document.querySelectorAll(e).forEach(e=>e.remove())},isElementVisible(e){const t=window.getComputedStyle(e);return"none"!==t.display&&"hidden"!==t.visibility&&null!==e.offsetParent}},o={async get(e){if("undefined"==typeof chrome||!chrome.storage)return null;try{return(await chrome.storage.local.get(e))[e]||null}catch(e){return console.error("Failed to get from storage:",e),null}},async set(e,t){if("undefined"!=typeof chrome&&chrome.storage)try{await chrome.storage.local.set({[e]:t})}catch(e){console.error("Failed to set in storage:",e)}},async remove(e){if("undefined"!=typeof chrome&&chrome.storage)try{await chrome.storage.local.remove(e)}catch(e){console.error("Failed to remove from storage:",e)}},async clear(){if("undefined"!=typeof chrome&&chrome.storage)try{await chrome.storage.local.clear()}catch(e){console.error("Failed to clear storage:",e)}}}}}]);
//# sourceMappingURL=shared.js.map