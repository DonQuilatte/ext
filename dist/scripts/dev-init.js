!function(){"use strict";if(console.log("[LOCAL MODE] Local-only mode initialization started"),"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.setUninstallURL&&(chrome.runtime.setUninstallURL,chrome.runtime.setUninstallURL=function(e){return console.log("[LOCAL MODE] Blocked setUninstallURL call:",e),Promise.resolve()}),"undefined"!=typeof fetch){const e=fetch;window.fetch=function(t,o={}){const r="string"==typeof t?t:t.toString();return window.MOCK_BACKEND&&window.MOCK_BACKEND.shouldMock(r)?(console.log("[LOCAL MODE] Intercepting fetch request:",r),window.MOCK_BACKEND.handleRequest(r,o)):r.includes("chatgpt.com")||r.startsWith("chrome-extension://")?e.call(this,t,o):(console.warn("[LOCAL MODE] Blocked external request in local-only mode:",r),Promise.reject(new Error("External requests blocked in local-only mode")))}}if("undefined"!=typeof XMLHttpRequest){const e=XMLHttpRequest;window.XMLHttpRequest=function(){const t=new e,o=t.open;return t.open=function(e,r,...n){const s="string"==typeof r?r:r.toString();return window.MOCK_BACKEND&&window.MOCK_BACKEND.shouldMock(s)?(console.log("[LOCAL MODE] Intercepting XHR request:",s),void setTimeout(()=>{window.MOCK_BACKEND.handleRequest(s,{method:e}).then(e=>e.text()).then(e=>{Object.defineProperty(t,"responseText",{value:e}),Object.defineProperty(t,"status",{value:200}),Object.defineProperty(t,"readyState",{value:4}),t.onreadystatechange&&t.onreadystatechange(),t.onload&&t.onload()}).catch(e=>{t.onerror&&t.onerror(e)})},0)):s.includes("chatgpt.com")||s.startsWith("chrome-extension://")?o.apply(this,[e,r,...n]):(console.warn("[LOCAL MODE] Blocked XHR request in local-only mode:",s),void setTimeout(()=>{t.onerror&&t.onerror(new Error("External requests blocked in local-only mode"))},0))},t}}if(window.DEV_MODE_PREMIUM=!0,window.mockPremiumFeatures=function(){return{isPremiumUser:!0,subscriptionStatus:"active",subscriptionType:"premium",expiryDate:new Date(Date.now()+31536e6).toISOString(),features:{unlimitedPrompts:!0,advancedFeatures:!0,prioritySupport:!0}}},"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local){const e=chrome.storage.local.get;chrome.storage.local.get=function(t,o){try{return e.call(this,t,e=>{try{chrome.runtime&&chrome.runtime.id?("string"==typeof t&&t.includes("store")?e.store&&(e.store["-r.6es£Jr1U0"]=!0,e.store.isPremiumUser=!0,e.store.subscriptionStatus="active"):Array.isArray(t)&&t.includes("store")&&e.store&&(e.store["-r.6es£Jr1U0"]=!0,e.store.isPremiumUser=!0,e.store.subscriptionStatus="active"),e.isPremiumUser=!0,e.subscriptionStatus="active",e.DEV_MODE_PREMIUM=!0,e.MOCK_PREMIUM=!0,console.log("[LOCAL MODE] Always returning premium status:",e),o&&o(e)):(console.warn("[LOCAL MODE] Extension context invalidated, using premium fallback data"),o&&o({isPremiumUser:!0,subscriptionStatus:"active",DEV_MODE_PREMIUM:!0,MOCK_PREMIUM:!0,store:{"-r.6es£Jr1U0":!0,isPremiumUser:!0,subscriptionStatus:"active"}}))}catch(e){console.error("[LOCAL MODE] Error in storage callback:",e),o&&o({isPremiumUser:!0,subscriptionStatus:"active",DEV_MODE_PREMIUM:!0,MOCK_PREMIUM:!0})}})}catch(e){console.error("[LOCAL MODE] Error in storage.get override:",e);const t={isPremiumUser:!0,subscriptionStatus:"active",DEV_MODE_PREMIUM:!0,MOCK_PREMIUM:!0};return o&&o(t),Promise.resolve(t)}}}console.log("[LOCAL MODE] Local-only mode initialization completed - All features permanently enabled")}();