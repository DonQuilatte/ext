!function(){"use strict";if(console.log("🔧 UNIFIED CONTEXT FIX LOADING - Local-only mode with permanent premium features"),window.UNIFIED_CONTEXT_FIX_LOADED)return void console.log("🔧 UNIFIED: Already loaded, skipping");!function(){try{const e=Object.getOwnPropertyDescriptor,o=Object.prototype.hasOwnProperty;Object.prototype.propertyIsEnumerable,Object.getOwnPropertyDescriptor=function(o,t){try{return null==o&&"isResetChatHistory"===t?(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Intercepted getOwnPropertyDescriptor on undefined for isResetChatHistory"),{value:!1,writable:!0,enumerable:!1,configurable:!0}):e.call(this,o,t)}catch(e){if("isResetChatHistory"===t)return console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - getOwnPropertyDescriptor error for isResetChatHistory, returning fallback"),{value:!1,writable:!0,enumerable:!1,configurable:!0};throw e}},Object.prototype.hasOwnProperty=function(e){try{return null==this?"isResetChatHistory"===e&&(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - hasOwnProperty called on undefined for isResetChatHistory"),!0):o.call(this,e)}catch(o){return"isResetChatHistory"===e&&(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - hasOwnProperty error for isResetChatHistory"),!0)}},function(){const e={get:function(e,o,t){try{return"isResetChatHistory"===o?null==e?(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Proxy intercepted isResetChatHistory access on undefined"),!1):e.hasOwnProperty&&e.hasOwnProperty(o)||o in e?e[o]:(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Proxy providing fallback isResetChatHistory"),!1):Reflect.get(e,o,t)}catch(e){if("isResetChatHistory"===o)return console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Proxy get error for isResetChatHistory:",e),!1;throw e}},has:function(e,o){try{return"isResetChatHistory"===o?null==e?(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Proxy has check on undefined for isResetChatHistory"),!0):Reflect.has(e,o)||!0:Reflect.has(e,o)}catch(e){return"isResetChatHistory"===o&&(console.warn("🔧 UNIFIED: ULTRA-AGGRESSIVE - Proxy has error for isResetChatHistory"),!0)}}};["chrome","store","config","extensionConfig","localStorage","sessionStorage"].forEach(o=>{try{window[o]&&"object"==typeof window[o]&&(window[o]=new Proxy(window[o],e),console.log(`🔧 UNIFIED: ULTRA-AGGRESSIVE - Wrapped ${o} with safe proxy`))}catch(e){}})}(),console.log("🔧 UNIFIED: ULTRA-AGGRESSIVE isResetChatHistory protection installed")}catch(e){console.error("🔧 UNIFIED: ULTRA-AGGRESSIVE protection failed:",e)}}();let e=0,o=0,t=0;function n(){try{return"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.id&&!chrome.runtime.lastError}catch(e){return!1}}function r(e){const o={DEV_MODE_PREMIUM:!0,MOCK_PREMIUM:!0,isPremiumUser:!0,isPremium:!0,userPlan:"premium",subscriptionStatus:"active",localOnlyMode:!0,local_folders:[],isResetChatHistory:!1,conversations:[],userFolders:[],prompts:[],"-r.6es£Jr1U0":!0};if(!e)return o;if(Array.isArray(e)){const t={};return e.forEach(e=>{t[e]=void 0!==o[e]?o[e]:null}),t}if("object"==typeof e){const t={};return Object.keys(e).forEach(n=>{t[n]=void 0!==o[n]?o[n]:e[n]}),t}return o}function s(e){try{Object.keys(e).forEach(o=>{localStorage.setItem(o,JSON.stringify(e[o]))})}catch(e){}}if(console.error,console.warn,console.error=function(...e){try{const o=[];for(let t=0;t<e.length;t++)try{const n=e[t];null===n?o.push("null"):void 0===n?o.push("undefined"):"string"==typeof n?o.push(n):"number"==typeof n||"boolean"==typeof n?o.push(String(n)):o.push("[object Object]")}catch(e){o.push("[error processing argument]")}const t=o.join(" ");if(t.includes("Extension context invalidated")||t.includes("CORS policy")||t.includes("blocked by CORS")||t.includes("Maximum call stack")||t.includes("RangeError")||t.includes("Illegal invocation")||t.includes("isResetChatHistory")||t.includes("Cannot read properties of undefined"))return;try{return void("undefined"!=typeof window&&window.console&&window.console.log&&window.console.log("ERROR: "+t))}catch(e){return}}catch(e){return}},console.warn=function(...e){try{const o=[];for(let t=0;t<e.length;t++)try{const n=e[t];null===n?o.push("null"):void 0===n?o.push("undefined"):"string"==typeof n?o.push(n):"number"==typeof n||"boolean"==typeof n?o.push(String(n)):o.push("[object Object]")}catch(e){o.push("[error processing argument]")}const t=o.join(" ");if(t.includes("Extension context invalidated")||t.includes("CORS policy")||t.includes("Maximum call stack")||t.includes("isResetChatHistory")||t.includes("Cannot read properties of undefined"))return;try{return void("undefined"!=typeof window&&window.console&&window.console.log&&window.console.log("WARN: "+t))}catch(e){return}}catch(e){return}},"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local){const o=chrome.storage.local.get,t=chrome.storage.local.set;chrome.storage.local.get=function(t,s){if(e>=3){console.log("🔧 UNIFIED: Storage get call depth exceeded, using fallback");const e=r(t);return s&&setTimeout(()=>s(e),0),Promise.resolve(e)}e++;try{if(!n()){const e=r(t);return s&&setTimeout(()=>s(e),0),Promise.resolve(e)}return o.call(this,t,o=>{if(e--,chrome.runtime.lastError){const e=r(t);s&&s(e)}else s&&s(o)})}catch(o){e--;const n=r(t);return s&&setTimeout(()=>s(n),0),Promise.resolve(n)}},chrome.storage.local.set=function(o,r){if(e>=3)return console.log("🔧 UNIFIED: Storage set call depth exceeded, using fallback"),s(o),r&&setTimeout(r,0),Promise.resolve();e++;try{return n()?t.call(this,o,o=>{e--,r&&r(o)}):(s(o),r&&setTimeout(r,0),Promise.resolve())}catch(t){return e--,s(o),r&&setTimeout(r,0),Promise.resolve()}}}const i=window.fetch;window.fetch=function(e,t){if(o>=3)return Promise.reject(new Error("Fetch blocked: call depth exceeded"));o++;try{let o;try{o="string"==typeof e?e:e&&"function"==typeof e.toString?e.toString():e&&e.href?e.href:String(e)}catch(e){return Promise.reject(new Error("URL parsing failed"))}if(o.includes("api.infi-dev.com")||o.includes("example-removed")||o.includes("infi-dev")||o.includes("lemonsqueezy.com")){if(console.log("🚫 UNIFIED: Blocking external API calls (Local-only mode):",o),o.includes("/folder/get")||o.includes("/folder/"))return console.log("📁 UNIFIED: Mocking folder API response (Local-only mode) - extension will use Real API Bridge"),Promise.resolve(new Response(JSON.stringify([]),{status:200,headers:{"Content-Type":"application/json"}}));if(o.includes("/conversation/get")||o.includes("/conversation/"))return console.log("💬 UNIFIED: Mocking conversation API response (Local-only mode) - extension will use Real API Bridge"),Promise.resolve(new Response(JSON.stringify([]),{status:200,headers:{"Content-Type":"application/json"}}));if(o.includes("/auth/generate-jwt"))return console.log("🔐 UNIFIED: Mocking JWT response (Local-only mode) - extension will use local auth"),Promise.resolve(new Response(JSON.stringify({jwt:"mock.jwt.token.for.local.development",success:!0}),{status:200,headers:{"Content-Type":"application/json"}}));const e=new Error("UNIFIED BLOCK: External API calls permanently blocked in local-only mode - "+o);return e.name="NetworkError",e.code="BLOCKED_BY_LOCAL_ONLY_MODE",Promise.reject(e)}return o.includes("chatgpt.com")||o.includes("openai.com")||o.includes("backend-api")||o.includes("oaistatic.com")||o.includes("oaiusercontent.com")||o.includes("chat.openai.com")||o.includes("auth.openai.com")?(console.log("✅ UNIFIED: Allowing OpenAI/ChatGPT API call (Local-only mode):",o),i.apply(window,arguments)):i.apply(window,arguments)}finally{o--}};const a=window.XMLHttpRequest;window.XMLHttpRequest=function(){if(t>=3)return{open:function(){},send:function(){},setRequestHeader:function(){},readyState:0,status:0,statusText:"Blocked by unified fix",responseText:"",response:""};t++;try{const e=new a,o=e.open;return e.open=function(t,n,...r){let s;try{s=String(n)}catch(e){return}return s.includes("chatgpt.com")||s.includes("openai.com")||s.includes("backend-api")||s.includes("oaistatic.com")||s.includes("oaiusercontent.com")||s.includes("chat.openai.com")?(console.log("✅ UNIFIED XHR: Allowing OpenAI/ChatGPT API call:",s),o.apply(e,[t,n,...r])):s.includes("api.infi-dev.com")||s.includes("example-removed")||s.includes("infi-dev")?(console.log("🚫 UNIFIED XHR: Blocking ALL external API calls, using local functionality:",s),e.readyState=4,e.status=200,e.statusText="OK",s.includes("/folder/get")||s.includes("/folder/")?(console.log("📁 UNIFIED XHR: Mocking folder API response - extension will use Real API Bridge"),e.responseText=JSON.stringify([]),e.response=JSON.stringify([])):s.includes("/conversation/get")||s.includes("/conversation/")?(console.log("💬 UNIFIED XHR: Mocking conversation API response - extension will use Real API Bridge"),e.responseText=JSON.stringify([]),e.response=JSON.stringify([])):s.includes("/auth/generate-jwt")?(console.log("🔐 UNIFIED XHR: Mocking JWT response - extension will use local auth"),e.responseText=JSON.stringify({jwt:"mock.jwt.token.for.local.development",success:!0}),e.response=e.responseText):(e.status=0,e.statusText="UNIFIED BLOCK: External API blocked - using local functionality",e.responseText="",e.response=""),void(e.send=function(){setTimeout(()=>{e.onreadystatechange&&e.onreadystatechange(),e.onload&&200===e.status&&e.onload()},0)})):o.apply(e,[t,n,...r])},e}finally{t--}},window.DEV_MODE_PREMIUM=!0,window.MOCK_PREMIUM=!0,window.isPremiumUser=!0,window.isPremium=!0,window.userPlan="premium",window.subscriptionStatus="active",window.local_folders=[],window.isResetChatHistory=!1,window.conversations=[],window.userFolders=[],window.prompts=[],[window,window.chrome,window.document,window.localStorage,window.sessionStorage].forEach((e,o)=>{if(e&&"object"==typeof e)try{e.hasOwnProperty("isResetChatHistory")||(Object.defineProperty(e,"isResetChatHistory",{value:!1,writable:!0,enumerable:!1,configurable:!0}),console.log(`🔧 UNIFIED: Defined isResetChatHistory on object ${o}`))}catch(e){console.log(`🔧 UNIFIED: Could not define isResetChatHistory on object ${o}`)}}),Object.defineProperty(window,"safeAccessProperty",{value:function(e,o,t=null){try{return null==e?"isResetChatHistory"===o?(console.warn("🔧 UNIFIED: safeAccessProperty prevented undefined access to isResetChatHistory"),!1):t:e.hasOwnProperty&&e.hasOwnProperty(o)||o in e?e[o]:t}catch(e){return"isResetChatHistory"===o?(console.warn("🔧 UNIFIED: safeAccessProperty caught error for isResetChatHistory:",e),!1):t}},writable:!1,enumerable:!1,configurable:!1}),console.log("🔧 UNIFIED: Enhanced isResetChatHistory protection installed"),window.DEV_MODE_CONFIG={MOCK_PREMIUM:!0,LOCAL_ONLY_MODE:!0,BLOCK_EXTERNAL_APIS:!0,ENABLE_DEBUG_LOGGING:!0},window.MOCK_BACKEND={enabled:!0,mockResponses:!0,shouldMock:function(e){return e.includes("api.infi-dev.com")||e.includes("example-removed")||e.includes("infi-dev")||e.includes("lemonsqueezy.com")},getMockResponse:function(e){return e.includes("/auth/generate-jwt")?{jwt:"mock.jwt.token.for.local.development",success:!0}:e.includes("/folder/")||e.includes("/conversation/")?[]:{success:!0,mocked:!0}}},window.premiumStatus={active:!0,plan:"Premium",features:["manage_chats","manage_folders","manage_prompts"]},window.getConversations=async function(){console.log("🔄 UNIFIED: Using Real API Bridge for conversations");let e=0;for(;"function"!=typeof window.realGetConversations&&e<50;)await new Promise(e=>setTimeout(e,100)),e++;if("function"!=typeof window.realGetConversations)return console.warn("⚠️ UNIFIED: Real API Bridge not available after waiting"),[];try{const e=await window.realGetConversations();return console.log("✅ UNIFIED: Retrieved",e.length,"conversations from ChatGPT DOM"),e}catch(e){return console.warn("⚠️ UNIFIED: Real API Bridge failed, using fallback:",e),[]}},window.getUserFolders=async function(){console.log("🔄 UNIFIED: Using Real API Bridge for folders");let e=0;for(;"function"!=typeof window.realGetUserFolders&&e<50;)await new Promise(e=>setTimeout(e,100)),e++;if("function"!=typeof window.realGetUserFolders)return console.warn("⚠️ UNIFIED: Real API Bridge not available after waiting, using fallback"),[{id:"default",name:"All Conversations",color:"blue",created_at:Date.now()/1e3,updated_at:Date.now()/1e3}];try{const e=await window.realGetUserFolders();return console.log("✅ UNIFIED: Retrieved",e.length,"folders from ChatGPT DOM"),e}catch(e){return console.warn("⚠️ UNIFIED: Real API Bridge failed, using fallback:",e),[{id:"default",name:"All Conversations",color:"blue",created_at:Date.now()/1e3,updated_at:Date.now()/1e3}]}},window.getPrompts=async function(){console.log("🔄 UNIFIED: Using Real API Bridge for prompts");let e=0;for(;"function"!=typeof window.realGetPrompts&&e<50;)await new Promise(e=>setTimeout(e,100)),e++;if("function"!=typeof window.realGetPrompts)return console.warn("⚠️ UNIFIED: Real API Bridge not available after waiting, using default prompts"),[{id:"prompt_0",title:"Explain Like I'm 5",content:"Explain this concept in simple terms that a 5-year-old would understand.",category:"General"},{id:"prompt_1",title:"Code Review",content:"Please review this code and suggest improvements.",category:"Development"},{id:"prompt_2",title:"Summarize",content:"Please provide a concise summary of the following text.",category:"General"}];try{const e=await window.realGetPrompts();return console.log("✅ UNIFIED: Retrieved",e.length,"prompts from ChatGPT DOM"),e}catch(e){return console.warn("⚠️ UNIFIED: Real API Bridge failed, using fallback:",e),[{id:"prompt_0",title:"Explain Like I'm 5",content:"Explain this concept in simple terms that a 5-year-old would understand.",category:"General"},{id:"prompt_1",title:"Code Review",content:"Please review this code and suggest improvements.",category:"Development"},{id:"prompt_2",title:"Summarize",content:"Please provide a concise summary of the following text.",category:"General"}]}},window.getAllUserFolders=window.getUserFolders;try{localStorage.setItem("DEV_MODE_PREMIUM","true"),localStorage.setItem("MOCK_PREMIUM","true"),localStorage.setItem("isPremiumUser","true"),localStorage.setItem("isPremium","true"),localStorage.setItem("userPlan","premium"),localStorage.setItem("subscriptionStatus","active")}catch(e){}window.onerror=function(e,o,t,n,r){if(e&&(e.includes("Extension context invalidated")||e.includes("CORS policy")||e.includes("Illegal invocation")))return!0},window.addEventListener("unhandledrejection",function(e){e.reason&&e.reason.message&&(e.reason.message.includes("Extension context invalidated")||e.reason.message.includes("CORS policy")||e.reason.message.includes("isResetChatHistory")||e.reason.message.includes("Cannot read properties of undefined"))&&(console.log("🔧 UNIFIED: Caught Promise rejection:",e.reason.message),e.reason.message.includes("isResetChatHistory")&&(window.hasOwnProperty("isResetChatHistory")||(window.isResetChatHistory=!1,console.log("🔧 UNIFIED: Created window.isResetChatHistory fallback")),[window.chrome,window.store,window.config,window.extensionConfig].forEach((e,o)=>{if(e&&"object"==typeof e&&!e.hasOwnProperty("isResetChatHistory"))try{e.isResetChatHistory=!1,console.log(`🔧 UNIFIED: Created isResetChatHistory on object ${o}`)}catch(e){}}),window.safeGetIsResetChatHistory||(window.safeGetIsResetChatHistory=function(e){try{return!(!e||"object"!=typeof e||!e.hasOwnProperty("isResetChatHistory"))&&e.isResetChatHistory}catch(e){return console.warn("🔧 UNIFIED: safeGetIsResetChatHistory fallback used"),!1}},console.log("🔧 UNIFIED: Created safeGetIsResetChatHistory global function"))),e.preventDefault())}),function(){try{Object.getOwnPropertyDescriptor;const e=Object.getOwnPropertyDescriptor;Object.getOwnPropertyDescriptor=function(o,t){try{return null==o&&"isResetChatHistory"===t?(console.warn("🔧 UNIFIED: Intercepted property access on undefined object for isResetChatHistory"),{value:!1,writable:!0,enumerable:!0,configurable:!0}):e.call(this,o,t)}catch(e){if("isResetChatHistory"===t)return console.warn("🔧 UNIFIED: Property access error intercepted for isResetChatHistory"),{value:!1,writable:!0,enumerable:!0,configurable:!0};throw e}},console.log("🔧 UNIFIED: Proactive property access protection installed")}catch(e){console.warn("🔧 UNIFIED: Could not install proactive property protection:",e)}}(),window.unifiedContextFixActive=!0,window.UNIFIED_CONTEXT_FIX_LOADED=!0,console.log("✅ UNIFIED CONTEXT FIX LOADED - Local-only mode with permanent premium features active")}();