#!/usr/bin/env node
const fs=require("fs"),path=require("path");console.log("🏠 VALIDATING LOCAL MODE CONFIGURATION"),console.log("=====================================");let allTestsPassed=!0;const results=[];function logResult(e,n,s){const t=`${n?"✅":"❌"} ${e}: ${s}`;console.log(t),results.push({test:e,passed:n,message:s}),n||(allTestsPassed=!1)}function testUnifiedContextFix(){console.log("\n📋 Testing Unified Context Fix Configuration...");const e=path.join(__dirname,"unified-context-fix.js");if(!fs.existsSync(e))return void logResult("Unified Context Fix",!1,"File does not exist");const n=fs.readFileSync(e,"utf8"),s=n.includes("chatgpt.com")&&n.includes("openai.com")&&n.includes("backend-api");logResult("OpenAI API Allowlist",s,s?"OpenAI/ChatGPT APIs are allowed":"Missing OpenAI API allowlist");const t=n.includes("api.infi-dev.com")&&n.includes("example-removed")&&n.includes("infi-dev");logResult("External API Blocking",t,t?"External APIs are blocked":"Missing external API blocking");const o=n.includes("realGetUserFolders")&&n.includes("realGetConversations")&&n.includes("realGetPrompts");logResult("Real API Bridge Integration",o,o?"Real API Bridge functions integrated":"Missing Real API Bridge integration");const i=n.includes("MAX_CALL_DEPTH")&&(n.includes("storageCallDepth")||n.includes("fetchCallDepth")||n.includes("xhrCallDepth"));logResult("Infinite Loop Prevention",i,i?"Call depth tracking implemented":"Missing infinite loop prevention")}function testRealAPIBridge(){console.log("\n🌉 Testing Real API Bridge...");const e=path.join(__dirname,"real-api-bridge.js");if(!fs.existsSync(e))return void logResult("Real API Bridge",!1,"File does not exist");const n=fs.readFileSync(e,"utf8"),s=n.includes("realGetConversations")&&n.includes("realGetUserFolders")&&n.includes("realGetPrompts");logResult("Real API Bridge Functions",s,s?"All core functions present":"Missing core functions");const t=n.includes("querySelector")||n.includes("querySelectorAll");logResult("DOM Extraction",t,t?"DOM extraction implemented":"Missing DOM extraction")}function testDevModeConfig(){console.log("\n⚙️ Testing Development Mode Configuration...");const e=path.join(__dirname,"..","config","dev-mode.js");if(!fs.existsSync(e))return void logResult("Dev Mode Config",!1,"File does not exist");const n=fs.readFileSync(e,"utf8"),s=n.includes("OFFLINE_MODE")&&n.includes("true");logResult("Offline Mode",s,s?"Offline mode enabled":"Offline mode not enabled");const t=n.includes("MOCK_PREMIUM")&&n.includes("MOCK_API_RESPONSES");logResult("Mock Configuration",t,t?"Mock configurations present":"Missing mock configurations")}function testManifestConfig(){console.log("\n📋 Testing Manifest Configuration...");const e=path.join(__dirname,"..","manifest.json");if(fs.existsSync(e))try{const n=JSON.parse(fs.readFileSync(e,"utf8")),s=n.content_scripts&&n.content_scripts.length>0;logResult("Content Scripts",s,s?"Content scripts configured":"Missing content scripts");const t=n.permissions&&n.permissions.includes("activeTab");logResult("Permissions",t,t?"Required permissions present":"Missing required permissions")}catch(e){logResult("Manifest Parsing",!1,`Error parsing manifest: ${e.message}`)}else logResult("Manifest",!1,"File does not exist")}function testConflictingScripts(){console.log("\n🔍 Testing for Conflicting Scripts...");const e=__dirname;let n=!1;["ultra-aggressive-fix.js","emergency-fix.js"].forEach(s=>{const t=path.join(e,s);fs.existsSync(t)&&(logResult("Conflicting Script",!1,`Found conflicting script: ${s}`),n=!0)}),n||logResult("Conflicting Scripts",!0,"No conflicting scripts found")}function testDocumentation(){console.log("\n📚 Testing Documentation...");const e=path.join(__dirname,"..","ARCHITECTURE_LOCAL_MODE.md"),n=path.join(__dirname,"..","DESIGN_LOCAL_MODE.md"),s=fs.existsSync(e);logResult("Architecture Documentation",s,s?"Architecture documentation present":"Missing architecture documentation");const t=fs.existsSync(n);logResult("Design Documentation",t,t?"Design documentation present":"Missing design documentation")}async function runAllTests(){testUnifiedContextFix(),testRealAPIBridge(),testDevModeConfig(),testManifestConfig(),testConflictingScripts(),testDocumentation(),console.log("\n🎯 VALIDATION SUMMARY"),console.log("====================");const e=results.filter(e=>e.passed).length,n=results.length;console.log(`Tests Passed: ${e}/${n}`),allTestsPassed?(console.log("✅ ALL TESTS PASSED - Local mode is properly configured!"),console.log("\n🏆 CONFIRMED CONFIGURATION:"),console.log("   ✅ OpenAI/ChatGPT API calls: ALLOWED"),console.log("   🚫 Intermediary API calls: BLOCKED"),console.log("   🏠 Local functionality: ACTIVE"),console.log("   🔄 Real API Bridge: INTEGRATED"),console.log("   🛡️ Infinite loop prevention: ENABLED"),console.log("\n🎯 PRIMARY USE CASES READY:"),console.log("   📁 Folder retrieval: Local DOM extraction"),console.log("   💬 Chat retrieval: Local DOM extraction")):(console.log("❌ SOME TESTS FAILED - Review configuration"),process.exit(1))}runAllTests().catch(e=>{console.error("❌ Test execution failed:",e),process.exit(1)});