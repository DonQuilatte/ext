!function(){"use strict";function o(){const o=[],n=Date.now()/1e3;for(let e=1;e<=5;e++)o.push({id:`conversation-${e}`,title:`Mock Conversation ${e}`,create_time:n-86400*e,update_time:n-3600*e,mapping:{[`node-${e}-1`]:{id:`node-${e}-1`,message:{id:`msg-${e}-1`,author:{role:"user"},content:{content_type:"text",parts:[`User message ${e}`]},create_time:n-86400*e},parent:null,children:[`node-${e}-2`]},[`node-${e}-2`]:{id:`node-${e}-2`,message:{id:`msg-${e}-2`,author:{role:"assistant"},content:{content_type:"text",parts:[`Assistant response ${e}`]},create_time:n-86400*e+30},parent:`node-${e}-1`,children:[]}},current_node:`node-${e}-2`,conversation_template_id:null,gizmo_id:null,is_archived:!1,safe_urls:[],default_model_slug:"gpt-4"});return o}function n(){console.log("[ConversationFix] Setting up conversation functions..."),window.getConversations=async function(){return console.log("[ConversationFix] getConversations called"),o()},window.getAllConversations=async function(){return console.log("[ConversationFix] getAllConversations called"),o()},window.fetchConversations=async function(){return console.log("[ConversationFix] fetchConversations called"),o()},window.loadConversations=async function(){return console.log("[ConversationFix] loadConversations called"),o()},window.getConversationHistory=async function(){return console.log("[ConversationFix] getConversationHistory called"),{items:o(),total:5,limit:20,offset:0,has_missing_conversations:!1}},window.fetchConversationHistory=async function(){return console.log("[ConversationFix] fetchConversationHistory called"),window.getConversationHistory()}}function e(){console.log("[ConversationFix] Fixing fetching history state..."),new MutationObserver(o=>{o.forEach(o=>{o.addedNodes.forEach(o=>{if(o.nodeType===Node.TEXT_NODE&&o.textContent&&o.textContent.includes("Fetching history")&&(console.log('[ConversationFix] Found "Fetching history..." text, replacing...'),setTimeout(()=>{o.parentNode&&(o.textContent="History loaded successfully")},1e3)),o.nodeType===Node.ELEMENT_NODE){const n=document.createTreeWalker(o,NodeFilter.SHOW_TEXT,null,!1);let e;for(;e=n.nextNode();)e.textContent&&e.textContent.includes("Fetching history")&&(console.log('[ConversationFix] Found nested "Fetching history..." text'),setTimeout(()=>{e.textContent="History loaded successfully"},1e3))}})})}).observe(document.body,{childList:!0,subtree:!0})}function t(){console.log("[ConversationFix] Initializing conversation history fixes..."),n(),e(),console.log("[ConversationFix] Fixing Manage Chats undefined errors..."),document.addEventListener("click",async function(o){const e=o.target;(e.textContent||e.innerText||"").includes("Manage Chats")&&(console.log("[ConversationFix] Manage Chats clicked, ensuring functions are available..."),n(),setTimeout(async()=>{try{const o=await window.getConversations();console.log("[ConversationFix] ✅ Conversations loaded successfully:",o.length,"items")}catch(o){console.log("[ConversationFix] ❌ Error loading conversations:",o),n()}},500))}),console.log("[ConversationFix] Overriding potentially broken functions..."),["getConversations","getAllConversations","fetchConversations","loadConversations","getConversationHistory","fetchConversationHistory"].forEach(n=>{const e=window[n];window[n]=async function(...t){console.log(`[ConversationFix] ${n} called with args:`,t);try{if(e&&"function"==typeof e){const o=await e.apply(this,t);if(o&&!o.error)return console.log(`[ConversationFix] ✅ ${n} original worked`),o}}catch(o){console.log(`[ConversationFix] ❌ ${n} original failed:`,o)}return console.log(`[ConversationFix] Using mock data for ${n}`),n.includes("History")?{items:o(),total:5,limit:20,offset:0,has_missing_conversations:!1}:o()}}),setInterval(()=>{n()},5e3),console.log("✅ Conversation history fixes initialized")}console.log("🔧 Fixing conversation history fetching..."),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t(),window.fixConversationHistory={init:t,fixConversationFunctions:n,generateMockConversations:o,fixFetchingHistoryState:e}}();